'use client';

import { createRef, useCallback } from 'react';
import { getRandomId } from '../../internal/getRandomId';
import { useModalsContext } from '../../internal/ModalsContext';
import { Dialog, Menu, Popover, ResponsivePopover, Toast } from '../../webComponents';
import { MessageBox } from '../MessageBox';
const checkContext = context => {
  if (!context) {
    // eslint-disable-next-line no-console
    console.error(`Please make sure that your application is wrapped in the '<ThemeProvider />' component.`);
  }
};
function showDialog(props, setModal, container) {
  checkContext(setModal);
  const id = getRandomId();
  const ref = /*#__PURE__*/createRef();
  setModal?.({
    type: 'set',
    payload: {
      Component: Dialog,
      props: {
        ...props,
        open: true,
        onAfterClose: event => {
          if (typeof props.onAfterClose === 'function') {
            props.onAfterClose(event);
          }
          setModal({
            type: 'reset',
            payload: {
              id
            }
          });
        }
      },
      ref,
      container,
      id
    }
  });
  return {
    ref
  };
}
function showPopover(props, setModal, container) {
  checkContext(setModal);
  const id = getRandomId();
  const ref = /*#__PURE__*/createRef();
  setModal?.({
    type: 'set',
    payload: {
      Component: Popover,
      props: {
        ...props,
        open: true,
        onAfterClose: event => {
          if (typeof props.onAfterClose === 'function') {
            props.onAfterClose(event);
          }
          setModal({
            type: 'reset',
            payload: {
              id
            }
          });
        }
      },
      ref,
      container,
      id
    }
  });
  return {
    ref
  };
}
function showResponsivePopover(props, setModal, container) {
  checkContext(setModal);
  const id = getRandomId();
  const ref = /*#__PURE__*/createRef();
  setModal?.({
    type: 'set',
    payload: {
      Component: ResponsivePopover,
      props: {
        ...props,
        open: true,
        onAfterClose: event => {
          if (typeof props.onAfterClose === 'function') {
            props.onAfterClose(event);
          }
          setModal({
            type: 'reset',
            payload: {
              id
            }
          });
        }
      },
      ref,
      container,
      id
    }
  });
  return {
    ref
  };
}
function showMenu(props, setModal, container) {
  checkContext(setModal);
  const id = getRandomId();
  const ref = /*#__PURE__*/createRef();
  setModal?.({
    type: 'set',
    payload: {
      Component: Menu,
      props: {
        ...props,
        open: true,
        onAfterClose: event => {
          if (typeof props.onAfterClose === 'function') {
            props.onAfterClose(event);
          }
          setModal({
            type: 'reset',
            payload: {
              id
            }
          });
        }
      },
      ref,
      container,
      id
    }
  });
  return {
    ref
  };
}
function showMessageBox(props, setModal, container) {
  checkContext(setModal);
  const id = getRandomId();
  const ref = /*#__PURE__*/createRef();
  setModal?.({
    type: 'set',
    payload: {
      // @ts-expect-error: props type safety is covered by the `props` property
      Component: MessageBox,
      props: {
        ...props,
        open: true,
        onClose: event => {
          if (typeof props.onClose === 'function') {
            props.onClose(event);
          }
          setModal({
            type: 'reset',
            payload: {
              id
            }
          });
        }
      },
      ref,
      container,
      id
    }
  });
  return {
    ref
  };
}
function showToast(props, setModal, container) {
  const ref = /*#__PURE__*/createRef();
  checkContext(setModal);
  const id = getRandomId();
  setModal?.({
    type: 'set',
    payload: {
      Component: Toast,
      props: {
        ...props
      },
      ref: el => {
        ref.current = el;
        if (el && !el.open) {
          el.show();
          setTimeout(() => {
            setModal({
              type: 'reset',
              payload: {
                id
              }
            });
          }, props.duration ?? Toast.defaultProps.duration);
        }
      },
      container,
      id
    }
  });
  return {
    ref
  };
}
function showDialogFn(props, container) {
  const setModal = window['@ui5/webcomponents-react']?.setModal;
  const {
    ref
  } = showDialog(props, setModal, container);
  return {
    ref,
    close: () => {
      ref.current?.close();
    }
  };
}
function useShowDialogHook() {
  const {
    setModal
  } = useModalsContext();
  return useCallback((props, container) => {
    const {
      ref
    } = showDialog(props, setModal, container);
    return {
      ref,
      close: () => {
        ref.current?.close();
      }
    };
  }, [setModal]);
}
function showPopoverFn(props, container) {
  const setModal = window['@ui5/webcomponents-react']?.setModal;
  const {
    ref
  } = showPopover(props, setModal, container);
  return {
    ref,
    close: () => {
      ref.current?.close();
    }
  };
}
function useShowPopoverHook() {
  const {
    setModal
  } = useModalsContext();
  return useCallback((props, container) => {
    const {
      ref
    } = showPopover(props, setModal, container);
    return {
      ref,
      close: () => {
        ref.current?.close();
      }
    };
  }, [setModal]);
}
function showResponsivePopoverFn(props, container) {
  const setModal = window['@ui5/webcomponents-react']?.setModal;
  const {
    ref
  } = showResponsivePopover(props, setModal, container);
  return {
    ref,
    close: () => {
      ref.current?.close();
    }
  };
}
function useShowResponsivePopoverHook() {
  const {
    setModal
  } = useModalsContext();
  return useCallback((props, container) => {
    const {
      ref
    } = showResponsivePopover(props, setModal, container);
    return {
      ref,
      close: () => {
        ref.current?.close();
      }
    };
  }, [setModal]);
}
function showMenuFn(props, container) {
  const setModal = window['@ui5/webcomponents-react']?.setModal;
  const {
    ref
  } = showMenu(props, setModal, container);
  return {
    ref,
    close: () => {
      ref.current?.close();
    }
  };
}
function useShowMenuHook() {
  const {
    setModal
  } = useModalsContext();
  return useCallback((props, container) => {
    const {
      ref
    } = showMenu(props, setModal, container);
    return {
      ref,
      close: () => {
        ref.current?.close();
      }
    };
  }, [setModal]);
}
function showMessageBoxFn(props, container) {
  const setModal = window['@ui5/webcomponents-react']?.setModal;
  const {
    ref
  } = showMessageBox(props, setModal, container);
  return {
    ref,
    close: () => {
      ref.current?.close();
    }
  };
}
function useShowMessageBox() {
  const {
    setModal
  } = useModalsContext();
  return useCallback((props, container) => {
    const {
      ref
    } = showMessageBox(props, setModal, container);
    return {
      ref,
      close: () => {
        ref.current?.close();
      }
    };
  }, [setModal]);
}
function showToastFn(props, container) {
  const setModal = window['@ui5/webcomponents-react']?.setModal;
  const {
    ref
  } = showToast(props, setModal, container);
  return {
    ref
  };
}
function useShowToastHook() {
  const {
    setModal
  } = useModalsContext();
  return useCallback((props, container) => {
    const {
      ref
    } = showToast(props, setModal, container);
    return {
      ref
    };
  }, [setModal]);
}

/**
 * Utility class for opening modals in an imperative way.
 *
 * These static helper methods might be useful for showing e.g. Toasts or MessageBoxes after successful or failed
 * network calls.
 *
 * @since 0.22.2
 */
export const Modals = {
  showDialog: showDialogFn,
  useShowDialog: useShowDialogHook,
  showPopover: showPopoverFn,
  useShowPopover: useShowPopoverHook,
  showResponsivePopover: showResponsivePopoverFn,
  useShowResponsivePopover: useShowResponsivePopoverHook,
  /**
   * @since 1.8.0
   */
  showMenu: showMenuFn,
  /**
   * @since 1.8.0
   */
  useShowMenu: useShowMenuHook,
  showMessageBox: showMessageBoxFn,
  useShowMessageBox: useShowMessageBox,
  showToast: showToastFn,
  useShowToast: useShowToastHook
};