'use client';

import circleTask2Icon from '@ui5/webcomponents-icons/dist/circle-task-2.js';
import { clsx } from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxDirection } from '../../enums';
import { BusyIndicatorSize } from '../../enums/BusyIndicatorSize';
import { addCustomCSSWithScoping } from '../../internal/addCustomCSSWithScoping';
import { Icon, TableCell, TableRow } from '../../webComponents';
import { BusyIndicator } from '../../webComponents/BusyIndicator';
import { Label } from '../../webComponents/Label';
import { FlexBox } from '../FlexBox';
import styles from './FilterGroupItem.jss';
addCustomCSSWithScoping('ui5-table-row', `
/* hide navigated cell */
:host([data-component-name="FilterBarDialogTableRow"]) .ui5-table-row-navigated {
 display:none;
}
`);
const useStyles = createUseStyles(styles, {
  name: 'FilterGroupItem'
});
/**
 * Represents a filter belonging to the `FilterBar`.
 */
export const FilterGroupItem = /*#__PURE__*/forwardRef((props, ref) => {
  const classes = useStyles();
  const {
    groupName = 'default',
    considerGroupName,
    label = '',
    labelTooltip,
    required = false,
    visible = true,
    visibleInFilterBar,
    children,
    loading,
    className,
    slot,
    active,
    ...rest
  } = props;
  const inFB = props['data-in-fb'];
  const withValues = props['data-with-values'];
  const selected = props['data-selected'];
  if (!required && (!visible || inFB && !visibleInFilterBar)) return null;

  // todo use context instead of data attributes
  if (!inFB) {
    return (
      /*#__PURE__*/
      //todo: disable selection for required fields when it's possible, or the table is fully controllable (https://github.com/SAP/ui5-webcomponents/issues/5662)
      React.createElement(TableRow, {
        "data-react-key": props['data-react-key'],
        selected: selected,
        "data-required": required,
        "data-component-name": "FilterBarDialogTableRow"
      }, /*#__PURE__*/React.createElement(TableCell, null, /*#__PURE__*/React.createElement(FlexBox, {
        direction: FlexBoxDirection.Column
      }, /*#__PURE__*/React.createElement(Label, {
        className: classes.dialogCellLabel,
        title: labelTooltip ?? label,
        required: required,
        showColon: withValues
      }, label), withValues && children)), !withValues && /*#__PURE__*/React.createElement(TableCell, {
        className: classes.dialogActiveCell
      }, active && /*#__PURE__*/React.createElement(Icon, {
        name: circleTask2Icon,
        className: classes.dialogActiveIcon
      })))
    );
  }
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    slot: slot,
    ...rest,
    className: clsx(classes.filterItem, className)
  }, /*#__PURE__*/React.createElement("div", {
    className: inFB ? classes.innerFilterItemContainer : classes.innerFilterItemContainerDialog
  }, /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement(Label, {
    title: labelTooltip ?? label,
    required: required,
    showColon: true
  }, `${considerGroupName && groupName !== 'default' ? `${groupName}: ` : ''}
          ${label}`)), loading ? /*#__PURE__*/React.createElement(BusyIndicator, {
    className: classes.loadingContainer,
    active: true,
    size: BusyIndicatorSize.Small
  }) : children));
});
FilterGroupItem.displayName = 'FilterGroupItem';
FilterGroupItem.defaultProps = {
  groupName: 'default',
  visible: true,
  required: false,
  label: ''
};