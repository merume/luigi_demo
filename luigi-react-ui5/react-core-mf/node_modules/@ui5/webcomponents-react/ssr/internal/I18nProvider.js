import { getI18nBundle } from '@ui5/webcomponents-base/dist/i18nBundle.js';
import { attachLanguageChange, detachLanguageChange } from '@ui5/webcomponents-base/dist/locale/languageChange.js';
import { getI18nContext } from '@ui5/webcomponents-react-base';
import React, { useCallback, useEffect, useReducer, useRef } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
const bundleReducer = (currentBundles, action) => {
  return {
    ...currentBundles,
    ...action.payload
  };
};
export function I18nProvider(_ref) {
  let {
    children
  } = _ref;
  const [i18nBundles, setI18nBundles] = useReducer(bundleReducer, {});
  const localBundles = useRef({});
  const isMounted = useRef(false);
  const updateBundles = useCallback(() => {
    return Promise.all(Object.keys(localBundles.current).map(bundleName => getI18nBundle(bundleName))).then(bundles => {
      const bundleMap = bundles.reduce((acc, bundle) => ({
        ...acc,
        [bundle.packageName]: bundle
      }), {});
      if (isMounted.current) {
        setI18nBundles({
          payload: bundleMap
        });
      }
    });
  }, []);
  const setI18nBundle = useCallback((name, bundle) => {
    localBundles.current[name] = bundle;
    void updateBundles();
  }, []);
  useEffect(() => {
    isMounted.current = true;
    attachLanguageChange(updateBundles);
    return () => {
      isMounted.current = false;
      detachLanguageChange(updateBundles);
    };
  }, []);
  const Context = getI18nContext();
  return /*#__PURE__*/_jsx(Context.Provider, {
    value: {
      i18nBundles,
      setI18nBundle
    },
    children: children
  });
}