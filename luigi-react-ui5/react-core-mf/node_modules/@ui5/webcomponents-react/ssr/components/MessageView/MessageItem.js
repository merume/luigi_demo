'use client';

import iconArrowRight from '@ui5/webcomponents-icons/dist/slim-arrow-right.js';
import { CssSizeVariables, ThemingParameters } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef, useContext } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems } from '../../enums/FlexBoxAlignItems';
import { FlexBoxDirection } from '../../enums/FlexBoxDirection';
import { ListItemType } from '../../enums/ListItemType';
import { ValueState } from '../../enums/ValueState';
import { MessageViewContext } from '../../internal/MessageViewContext';
import { CustomListItem } from '../../webComponents/CustomListItem';
import { Icon } from '../../webComponents/Icon';
import { Label } from '../../webComponents/Label';
import { FlexBox } from '../FlexBox';
import { getIconNameForType } from './utils';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const useStyles = createUseStyles({
  listItem: {
    height: CssSizeVariables.sapWcrMessageViewListItemHeightSingle
  },
  message: {
    padding: '0.25rem 0',
    width: '100%',
    maxWidth: '100%',
    overflow: 'hidden',
    paddingRight: '1rem',
    boxSizing: 'border-box'
  },
  withSubtitle: {
    height: CssSizeVariables.sapWcrMessageViewListItemHeightByLine
  },
  withChildren: {
    paddingRight: '0rem'
  },
  iconContainer: {
    width: '3rem',
    minWidth: '3rem',
    height: '2.25rem',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    width: '1rem',
    height: '1rem'
  },
  title: {
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    fontSize: ThemingParameters.sapFontHeader6Size,
    color: ThemingParameters.sapGroup_TitleTextColor,
    maxWidth: '100%',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    flex: '1 1 auto',
    '& + $subtitle': {
      marginTop: '0.25rem',
      cursor: 'inherit'
    }
  },
  subtitle: {},
  counter: {
    color: ThemingParameters.sapContent_MarkerTextColor,
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    paddingLeft: '1rem',
    flex: 'none'
  },
  navigation: {
    height: '0.875rem',
    width: '0.875rem',
    padding: '0 0.9375rem',
    flexShrink: 0
  },
  typeError: {
    '& $icon': {
      color: ThemingParameters.sapNegativeElementColor
    }
  },
  typeSuccess: {
    '& $icon': {
      color: ThemingParameters.sapPositiveElementColor
    }
  },
  typeWarning: {
    ' & $icon': {
      color: ThemingParameters.sapCriticalElementColor
    }
  },
  typeInformation: {
    '& $icon': {
      // color: ThemingParameters.sapInformativeElementColor
      color: ThemingParameters.sapNeutralElementColor
    }
  },
  typeNone: {
    '& $icon': {
      color: ThemingParameters.sapNeutralElementColor
    }
  }
}, {
  name: 'MessageItem'
});
/**
 * A component used to hold different types of system messages inside the `MessageView` component.
 */
const MessageItem = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    titleText,
    subtitleText,
    counter,
    type = ValueState.Error,
    children,
    className,
    ...rest
  } = props;
  const {
    selectMessage
  } = useContext(MessageViewContext);
  const classes = useStyles();
  const listItemClasses = clsx(classes.listItem, Reflect.get(classes, `type${type}`), className, subtitleText && classes.withSubtitle);
  const messageClasses = clsx(classes.message, children && classes.withChildren);
  const handleListItemClick = e => {
    if (children) {
      selectMessage(props);
      if (typeof rest.onClick === 'function') {
        rest.onClick(e);
      }
    }
  };
  return /*#__PURE__*/_jsx(CustomListItem, {
    onClick: handleListItemClick,
    "data-title": titleText,
    "data-type": type,
    type: children ? ListItemType.Active : ListItemType.Inactive,
    ...rest,
    className: listItemClasses,
    ref: ref,
    children: /*#__PURE__*/_jsxs(FlexBox, {
      alignItems: FlexBoxAlignItems.Center,
      className: messageClasses,
      children: [/*#__PURE__*/_jsx("div", {
        className: classes.iconContainer,
        children: /*#__PURE__*/_jsx(Icon, {
          name: getIconNameForType(type),
          className: classes.icon
        })
      }), /*#__PURE__*/_jsxs(FlexBox, {
        direction: FlexBoxDirection.Column,
        style: {
          flex: 'auto',
          whiteSpace: 'nowrap',
          overflow: 'hidden',
          textOverflow: 'ellipsis'
        },
        children: [titleText && /*#__PURE__*/_jsx("span", {
          className: classes.title,
          children: titleText
        }), subtitleText && /*#__PURE__*/_jsx(Label, {
          className: classes.subtitle,
          children: subtitleText
        })]
      }), counter != null && /*#__PURE__*/_jsx("span", {
        className: classes.counter,
        children: counter
      }), children && /*#__PURE__*/_jsx(Icon, {
        className: classes.navigation,
        name: iconArrowRight
      })]
    })
  });
});
MessageItem.displayName = 'MessageItem';
export { MessageItem };