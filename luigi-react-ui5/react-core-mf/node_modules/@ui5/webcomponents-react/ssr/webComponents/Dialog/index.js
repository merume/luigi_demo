'use client';

import { ValueState, PopupAccessibleRole } from '../../enums';
import { withWebComponent } from '../../internal/withWebComponent';
/**
 * The `Dialog` component is used to temporarily display some information in a size-limited window in front of the regular app screen. It is used to prompt the user for an action or a confirmation. The `Dialog` interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked. The dialog combines concepts known from other technologies where the windows have names such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.
 *
 * The `Dialog` is modal, which means that an user action is required before it is possible to return to the parent window. To open multiple dialogs, each dialog element should be separate in the markup. This will ensure the correct modal behavior. Avoid nesting dialogs within each other. The content of the `Dialog` is fully customizable.
 *
 * __Note:__ This component is a web component developed by the UI5 Web Componentsâ€™ team.
 *
 * <ui5-link href="https://sap.github.io/ui5-webcomponents/playground/components/Dialog" target="_blank">UI5 Web Components Playground</ui5-link>
 */
const Dialog = withWebComponent('ui5-dialog', ['headerText', 'state', 'accessibleName', 'accessibleNameRef', 'accessibleRole', 'initialFocus'], ['draggable', 'resizable', 'stretch', 'open', 'preventFocusRestore'], ['footer', 'header'], ['after-close', 'after-open', 'before-close', 'before-open'], () => import('@ui5/webcomponents/dist/Dialog.js'));
Dialog.displayName = 'Dialog';
Dialog.defaultProps = {
  state: ValueState.None,
  accessibleRole: PopupAccessibleRole.Dialog
};
export { Dialog };