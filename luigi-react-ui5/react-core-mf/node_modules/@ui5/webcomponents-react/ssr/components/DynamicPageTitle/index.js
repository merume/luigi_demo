'use client';

import { debounce, Device, useSyncRef } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { Children, cloneElement, forwardRef, isValidElement, useCallback, useEffect, useRef, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems, FlexBoxJustifyContent, ToolbarDesign, ToolbarStyle } from '../../enums';
import { stopPropagation } from '../../internal/stopPropagation';
import { flattenFragments } from '../../internal/utils';
import { FlexBox } from '../FlexBox';
import { Toolbar } from '../Toolbar';
import { ToolbarSeparator } from '../ToolbarSeparator';
import { ActionsSpacer } from './ActionsSpacer';
import { DynamicPageTitleStyles } from './DynamicPageTitle.jss';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const useStyles = createUseStyles(DynamicPageTitleStyles, {
  name: 'DynamicPageTitle'
});
const enhanceActionsWithClick = (actions, ref) => flattenFragments(actions, Infinity).map(action => {
  if ( /*#__PURE__*/isValidElement(action)) {
    return /*#__PURE__*/cloneElement(action, {
      // @ts-expect-error: only actionable elements should be passed to either of the `action` props
      onClick: e => {
        if (typeof action.props?.onClick === 'function') {
          action.props.onClick(e);
        }
        if (ref.current?.isOpen() && !e.defaultPrevented) {
          ref.current.close();
        }
      }
    });
  }
});

/**
 * The `DynamicPageTitle` component is part of the `DynamicPage` family and is used to serve as title of the `DynamicPage` and `ObjectPage`.
 * It can contain Breadcrumbs, Title, Subtitle, Content, KPIs and Actions.
 */
const DynamicPageTitle = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    actions,
    breadcrumbs,
    children,
    header,
    subHeader,
    showSubHeaderRight,
    navigationActions,
    className,
    style,
    onToggleHeaderContentVisibility,
    actionsToolbarProps,
    navigationActionsToolbarProps,
    ...rest
  } = props;
  const classes = useStyles();
  const [componentRef, dynamicPageTitleRef] = useSyncRef(ref);
  const [showNavigationInTopArea, setShowNavigationInTopArea] = useState(undefined);
  const isMounted = useRef(false);
  const [isPhone, setIsPhone] = useState(Device.getCurrentRange(dynamicPageTitleRef.current?.getBoundingClientRect().width)?.name === 'Phone');
  const containerClasses = clsx(classes.container, isPhone && classes.phone, className);
  const [actionsOverflowRef, syncedActionsOverflowRef] = useSyncRef(actionsToolbarProps?.overflowPopoverRef ?? null);
  const [navActionsOverflowRef, syncedNavActionsOverflowRef] = useSyncRef(navigationActionsToolbarProps?.overflowPopoverRef ?? null);
  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, [isMounted]);
  const {
    onClick: _0,
    ...propsWithoutOmitted
  } = rest;
  const onHeaderClick = useCallback(e => {
    if (typeof props?.onClick === 'function') {
      props.onClick(e);
    }
    if (typeof onToggleHeaderContentVisibility === 'function' && !props?.['data-not-clickable']) {
      onToggleHeaderContentVisibility(e);
    }
  }, [props?.onClick, onToggleHeaderContentVisibility, props?.['data-not-clickable']]);
  useEffect(() => {
    const debouncedObserverFn = debounce(_ref => {
      let [titleContainer] = _ref;
      // Firefox implements `borderBoxSize` as a single content rect, rather than an array
      const borderBoxSize = Array.isArray(titleContainer.borderBoxSize) ? titleContainer.borderBoxSize[0] : titleContainer.borderBoxSize;
      // Safari doesn't implement `borderBoxSize`
      const titleContainerWidth = borderBoxSize?.inlineSize ?? titleContainer.target.getBoundingClientRect().width;
      setIsPhone(Device.getCurrentRange(titleContainerWidth)?.name === 'Phone');
      if (titleContainerWidth < 1280 && !showNavigationInTopArea === true && isMounted.current) {
        setShowNavigationInTopArea(true);
      } else if (titleContainerWidth >= 1280 && !showNavigationInTopArea === false && isMounted.current) {
        setShowNavigationInTopArea(false);
      }
    }, 150);
    const observer = new ResizeObserver(debouncedObserverFn);
    if (dynamicPageTitleRef.current) {
      observer.observe(dynamicPageTitleRef.current);
    }
    return () => {
      debouncedObserverFn.cancel();
      observer.disconnect();
    };
  }, [dynamicPageTitleRef.current, showNavigationInTopArea, isMounted]);
  const handleActionsToolbarClick = e => {
    stopPropagation(e);
    if (typeof actionsToolbarProps?.onClick === 'function') {
      actionsToolbarProps.onClick(e);
    }
  };
  const handleNavigationActionsToolbarClick = e => {
    stopPropagation(e);
    if (typeof navigationActionsToolbarProps?.onClick === 'function') {
      navigationActionsToolbarProps.onClick(e);
    }
  };
  return /*#__PURE__*/_jsxs(FlexBox, {
    className: containerClasses,
    style: style,
    ref: componentRef,
    "data-component-name": "DynamicPageTitle",
    onClick: onHeaderClick,
    ...propsWithoutOmitted,
    children: [(breadcrumbs || navigationActions && showNavigationInTopArea) && /*#__PURE__*/_jsxs(FlexBox, {
      justifyContent: FlexBoxJustifyContent.SpaceBetween,
      "data-component-name": "DynamicPageTitleBreadcrumbs",
      children: [breadcrumbs && /*#__PURE__*/_jsx("div", {
        className: classes.breadcrumbs,
        onClick: stopPropagation,
        children: breadcrumbs
      }), showNavigationInTopArea && /*#__PURE__*/_jsxs(Toolbar, {
        tabIndex: undefined,
        role: undefined,
        ...navigationActionsToolbarProps,
        overflowButton: navigationActionsToolbarProps?.overflowButton,
        className: clsx(classes.toolbar, navigationActionsToolbarProps?.className),
        onClick: handleNavigationActionsToolbarClick,
        "data-component-name": "DynamicPageTitleNavActions",
        onOverflowChange: navigationActionsToolbarProps?.onOverflowChange,
        overflowPopoverRef: navActionsOverflowRef,
        design: ToolbarDesign.Auto,
        toolbarStyle: ToolbarStyle.Clear,
        active: true,
        children: [/*#__PURE__*/_jsx(ActionsSpacer, {
          onClick: onHeaderClick,
          noHover: props?.['data-not-clickable']
        }), enhanceActionsWithClick(navigationActions, syncedNavActionsOverflowRef)]
      })]
    }), /*#__PURE__*/_jsxs(FlexBox, {
      alignItems: FlexBoxAlignItems.Center,
      style: {
        flexGrow: 1,
        width: '100%'
      },
      children: [/*#__PURE__*/_jsxs(FlexBox, {
        className: classes.titleMainSection,
        children: [header && /*#__PURE__*/_jsx("div", {
          className: classes.title,
          "data-component-name": "DynamicPageTitleHeader",
          children: header
        }), subHeader && showSubHeaderRight && /*#__PURE__*/_jsx("div", {
          className: classes.subTitle,
          "data-component-name": "DynamicPageTitleSubHeader",
          children: subHeader
        }), children && /*#__PURE__*/_jsx("div", {
          className: classes.content,
          "data-component-name": "DynamicPageTitleContent",
          children: children
        })]
      }), (actions || !showNavigationInTopArea && navigationActions) && /*#__PURE__*/_jsxs(Toolbar, {
        tabIndex: undefined,
        role: undefined,
        ...actionsToolbarProps,
        overflowButton: actionsToolbarProps?.overflowButton,
        design: ToolbarDesign.Auto,
        toolbarStyle: ToolbarStyle.Clear,
        active: true,
        className: clsx(classes.toolbar, actionsToolbarProps?.className),
        onClick: handleActionsToolbarClick,
        "data-component-name": "DynamicPageTitleActions",
        onOverflowChange: actionsToolbarProps?.onOverflowChange,
        overflowPopoverRef: actionsOverflowRef,
        children: [/*#__PURE__*/_jsx(ActionsSpacer, {
          onClick: onHeaderClick,
          noHover: props?.['data-not-clickable']
        }), enhanceActionsWithClick(actions, syncedActionsOverflowRef), !showNavigationInTopArea && Children.count(actions) > 0 && Children.count(navigationActions) > 0 && /*#__PURE__*/_jsx(ToolbarSeparator, {}), !showNavigationInTopArea && enhanceActionsWithClick(navigationActions, syncedActionsOverflowRef)]
      })]
    }), subHeader && !showSubHeaderRight && /*#__PURE__*/_jsx(FlexBox, {
      children: /*#__PURE__*/_jsx("div", {
        className: clsx(classes.subTitle, classes.subTitleBottom),
        "data-component-name": "DynamicPageTitleSubHeader",
        children: subHeader
      })
    })]
  });
});
DynamicPageTitle.displayName = 'DynamicPageTitle';
export { DynamicPageTitle };