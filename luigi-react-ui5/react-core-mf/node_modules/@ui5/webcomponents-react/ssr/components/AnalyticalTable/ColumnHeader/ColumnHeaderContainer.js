import { ThemingParameters } from '@ui5/webcomponents-react-base';
import React, { forwardRef, Fragment } from 'react';
import { createUseStyles } from 'react-jss';
import { ColumnHeader } from './index';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const styles = {
  resizer: {
    display: 'inline-block',
    width: '3px',
    height: '100%',
    position: 'absolute',
    bottom: 0,
    top: 0,
    zIndex: 1,
    cursor: 'col-resize',
    '&:hover, &:active': {
      backgroundColor: ThemingParameters.sapContent_DragAndDropActiveColor
    }
  }
};
const useStyles = createUseStyles(styles, {
  name: 'Resizer'
});
export const ColumnHeaderContainer = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    headerProps,
    headerGroup,
    onSort,
    onGroupByChanged,
    onDragStart,
    onDragOver,
    onDrop,
    onDragEnter,
    onDragEnd,
    dragOver,
    resizeInfo,
    isRtl,
    portalContainer,
    columnVirtualizer,
    scaleXFactor,
    uniqueId
  } = props;
  const classes = useStyles();
  return /*#__PURE__*/_jsx("div", {
    ...headerProps,
    style: {
      width: `${columnVirtualizer.getTotalSize()}px`
    },
    ref: ref,
    "data-component-name": "AnalyticalTableHeaderRow",
    children: columnVirtualizer.getVirtualItems().map((virtualColumn, index) => {
      const column = headerGroup.headers[virtualColumn.index];
      if (!column) {
        return null;
      }
      const isLastColumn = !column.disableResizing && virtualColumn.index + 1 === headerGroup.headers.length;
      const resizerDirectionStyle = isRtl ? {
        right: `${column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0)}px`,
        transform: 'translateX(50%)'
      } : {
        left: `${column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0)}px`,
        transform: 'translateX(-50%)'
      };
      const {
        key,
        ...rest
      } = column.getHeaderProps();
      return /*#__PURE__*/_jsxs(Fragment, {
        children: [column.canResize && column.getResizerProps && /*#__PURE__*/_jsx("div", {
          ...column.getResizerProps(),
          "data-resizer": true,
          className: classes.resizer,
          style: resizerDirectionStyle
        }), /*#__PURE__*/_jsx(ColumnHeader, {
          ...rest,
          id: `${uniqueId}${rest?.id ?? ''}`,
          columnId: rest.id,
          visibleColumnIndex: index,
          columnIndex: virtualColumn.index,
          onSort: onSort,
          onGroupBy: onGroupByChanged,
          onDragStart: onDragStart,
          onDragOver: onDragOver,
          onDrop: onDrop,
          onDragEnter: onDragEnter,
          onDragEnd: onDragEnd,
          dragOver: column.id === dragOver,
          headerTooltip: column.headerTooltip,
          isDraggable: (column.canReorder || !column.disableDragAndDrop) && !resizeInfo.isResizingColumn,
          virtualColumn: virtualColumn,
          isRtl: isRtl,
          portalContainer: portalContainer,
          scaleXFactor: scaleXFactor,
          children: column.render('Header')
        })]
      }, key);
    })
  });
});
ColumnHeaderContainer.displayName = 'ColumnHeaderContainer';