import React, { ReactElement, ReactNode, Ref } from 'react';
import { ToolbarDesign, ToolbarStyle } from '../../enums';
import { CommonProps } from '../../interfaces';
import { ButtonPropTypes, PopoverDomRef, ToggleButtonPropTypes } from '../../webComponents';
export interface ToolbarPropTypes extends Omit<CommonProps, 'onClick' | 'children'> {
    /**
     * Defines the content of the `Toolbar`.
     *
     * __Note:__ Although this prop accepts all `ReactNode` types, it is strongly recommended to not pass `string` or `number` to it.
     */
    children?: ReactNode | ReactNode[];
    /**
     * Defines the button shown when the `Toolbar` goes into overflow.
     *
     * __Note:__ It is strongly recommended that you only use `ToggleButton` in icon only mode in order to preserve the intended design.
     *
     * __Note:__ Per default a `ToggleButton` with the `"overflow"` icon and all necessary a11y attributes will be rendered.
     */
    overflowButton?: ReactElement<ToggleButtonPropTypes> | ReactElement<ButtonPropTypes>;
    /**
     * Defines the visual style of the `Toolbar`.
     *
     * __Note:__ The visual styles are theme-dependent.
     */
    toolbarStyle?: ToolbarStyle | keyof typeof ToolbarStyle;
    /**
     * Defines the `Toolbar` design.<br />
     * <b>Note:</b> Design settings are theme-dependent.
     */
    design?: ToolbarDesign | keyof typeof ToolbarDesign;
    /**
     * Indicates that the whole `Toolbar` is clickable. The Press event is fired only if `active` is set to true.
     */
    active?: boolean;
    /**
     * Sets the components outer HTML tag.
     *
     * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.
     */
    as?: keyof HTMLElementTagNameMap;
    /**
     * Defines where modals are rendered into via `React.createPortal`.
     *
     * You can find out more about this [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base-working-with-portals--page).
     *
     * Defaults to: `document.body`
     */
    portalContainer?: Element;
    /**
     * Defines the number of items inside the toolbar which should always be visible.
     * _E.g.: `numberOfAlwaysVisibleItems={3}` would always show the first three items, no matter the size of the toolbar._
     *
     * __Note__: To preserve the intended design, it's not recommended to overwrite the `min-width` when using this prop.
     */
    numberOfAlwaysVisibleItems?: number;
    /**
     * Exposes the React Ref of the overflow popover.
     * This can be useful, for example, when wanting to close the popover on click or selection of a child element.
     */
    overflowPopoverRef?: Ref<PopoverDomRef>;
    /**
     * Fired if the `active` prop is set to true and the user clicks or presses Enter/Space on the `Toolbar`.
     */
    onClick?: (event: CustomEvent) => void;
    /**
     * Fired when the content of the overflow popover has changed.
     */
    onOverflowChange?: (event: {
        toolbarElements: HTMLElement[];
        overflowElements: HTMLCollection;
        target: HTMLElement;
    }) => void;
}
/**
 * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.
 *
 * The content of the `Toolbar` moves into the overflow area from right to left when the available space is not enough in the visible area of the container.
 * It can be accessed by the user through the overflow button that opens it in a popover.
 *
 * __Note:__ The overflow popover is mounted only when opened, i.e., any child component of the popover will be remounted, when moved into it.
 */
declare const Toolbar: React.ForwardRefExoticComponent<ToolbarPropTypes & React.RefAttributes<HTMLDivElement>>;
export { Toolbar };
