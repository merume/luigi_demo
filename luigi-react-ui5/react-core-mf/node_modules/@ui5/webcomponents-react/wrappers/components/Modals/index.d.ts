import { RefObject } from 'react';
import { DialogDomRef, DialogPropTypes, MenuDomRef, MenuPropTypes, PopoverDomRef, PopoverPropTypes, ResponsivePopoverDomRef, ResponsivePopoverPropTypes, ToastDomRef, ToastPropTypes } from '../../webComponents';
import { MessageBoxPropTypes } from '../MessageBox';
type ModalReturnType<DomRef> = {
    ref: RefObject<DomRef>;
};
type ClosableModalReturnType<DomRef> = ModalReturnType<DomRef> & {
    close: () => void;
};
type ModalHookReturnType<Props, DomRef, ContainerElement = HTMLElement> = (props: Props, container?: ContainerElement) => ModalReturnType<DomRef>;
type CloseableModalHookReturnType<Props, DomRef, ContainerElement = HTMLElement> = (props: Props, container?: ContainerElement) => ClosableModalReturnType<DomRef>;
declare function showDialogFn<ContainerElement = HTMLElement>(props: DialogPropTypes, container?: ContainerElement): ClosableModalReturnType<DialogDomRef>;
declare function useShowDialogHook<ContainerElement>(): CloseableModalHookReturnType<DialogPropTypes, DialogDomRef, ContainerElement>;
declare function showPopoverFn<ContainerElement>(props: PopoverPropTypes, container?: ContainerElement): ClosableModalReturnType<PopoverDomRef>;
declare function useShowPopoverHook<ContainerElement>(): CloseableModalHookReturnType<PopoverPropTypes, PopoverDomRef, ContainerElement>;
declare function showResponsivePopoverFn<ContainerElement>(props: ResponsivePopoverPropTypes, container?: ContainerElement): ClosableModalReturnType<ResponsivePopoverDomRef>;
declare function useShowResponsivePopoverHook<ContainerElement>(): CloseableModalHookReturnType<ResponsivePopoverPropTypes, ResponsivePopoverDomRef, ContainerElement>;
declare function showMenuFn<ContainerElement>(props: MenuPropTypes, container?: ContainerElement): ClosableModalReturnType<MenuDomRef>;
declare function useShowMenuHook<ContainerElement>(): CloseableModalHookReturnType<MenuPropTypes, MenuDomRef, ContainerElement>;
declare function showMessageBoxFn<ContainerElement>(props: MessageBoxPropTypes, container?: ContainerElement): ClosableModalReturnType<DialogDomRef>;
declare function useShowMessageBox<ContainerElement>(): CloseableModalHookReturnType<MessageBoxPropTypes, DialogDomRef, ContainerElement>;
declare function showToastFn<ContainerElement>(props: ToastPropTypes, container?: ContainerElement): ModalReturnType<ToastDomRef>;
declare function useShowToastHook<ContainerElement>(): ModalHookReturnType<ToastPropTypes, ToastDomRef, ContainerElement>;
/**
 * Utility class for opening modals in an imperative way.
 *
 * These static helper methods might be useful for showing e.g. Toasts or MessageBoxes after successful or failed
 * network calls.
 *
 * @since 0.22.2
 */
export declare const Modals: {
    showDialog: typeof showDialogFn;
    useShowDialog: typeof useShowDialogHook;
    showPopover: typeof showPopoverFn;
    useShowPopover: typeof useShowPopoverHook;
    showResponsivePopover: typeof showResponsivePopoverFn;
    useShowResponsivePopover: typeof useShowResponsivePopoverHook;
    /**
     * @since 1.8.0
     */
    showMenu: typeof showMenuFn;
    /**
     * @since 1.8.0
     */
    useShowMenu: typeof useShowMenuHook;
    showMessageBox: typeof showMessageBoxFn;
    useShowMessageBox: typeof useShowMessageBox;
    showToast: typeof showToastFn;
    useShowToast: typeof useShowToastHook;
};
export {};
