var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SegmentedButton_1;
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import ItemNavigation from "@ui5/webcomponents-base/dist/delegate/ItemNavigation.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { getI18nBundle } from "@ui5/webcomponents-base/dist/i18nBundle.js";
import ResizeHandler from "@ui5/webcomponents-base/dist/delegate/ResizeHandler.js";
import { renderFinished } from "@ui5/webcomponents-base/dist/Render.js";
import { isSpace, isEnter, } from "@ui5/webcomponents-base/dist/Keys.js";
import { SEGMENTEDBUTTON_ARIA_DESCRIPTION, SEGMENTEDBUTTON_ARIA_DESCRIBEDBY } from "./generated/i18n/i18n-defaults.js";
import SegmentedButtonItem from "./SegmentedButtonItem.js";
// Template
import SegmentedButtonTemplate from "./generated/templates/SegmentedButtonTemplate.lit.js";
// Styles
import SegmentedButtonCss from "./generated/themes/SegmentedButton.css.js";
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code>ui5-segmented-button</code> shows a group of items. When the user clicks or taps
 * one of the items, it stays in a pressed state. It automatically resizes the items
 * to fit proportionally within the component. When no width is set, the component uses the available width.
 * <br><br>
 * <b>Note:</b> There can be just one selected <code>item</code> at a time.
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/SegmentedButton";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.main.SegmentedButton
 * @extends sap.ui.webc.base.UI5Element
 * @tagname ui5-segmented-button
 * @since 1.0.0-rc.6
 * @appenddocs sap.ui.webc.main.SegmentedButtonItem
 * @public
 */
let SegmentedButton = SegmentedButton_1 = class SegmentedButton extends UI5Element {
    static async onDefine() {
        SegmentedButton_1.i18nBundle = await getI18nBundle("@ui5/webcomponents");
    }
    constructor() {
        super();
        this._itemNavigation = new ItemNavigation(this, {
            getItemsCallback: () => this.getSlottedNodes("items"),
        });
        this.absoluteWidthSet = false; // true when component width is set to absolute
        this.percentageWidthSet = false; // true when component width is set to 100%
        this.hasPreviouslyFocusedItem = false;
        this._handleResizeBound = this._doLayout.bind(this);
    }
    onEnterDOM() {
        ResizeHandler.register(this.parentNode, this._handleResizeBound);
    }
    onExitDOM() {
        if (this.parentNode) {
            ResizeHandler.deregister(this.parentNode, this._handleResizeBound);
        }
    }
    onBeforeRendering() {
        const items = this.getSlottedNodes("items");
        items.forEach((item, index, arr) => {
            item.posInSet = index + 1;
            item.sizeOfSet = arr.length;
        });
        this.normalizeSelection();
    }
    async onAfterRendering() {
        await this._doLayout();
    }
    prepareToMeasureItems() {
        this.style.width = "";
        this.items.forEach(item => {
            item.style.width = "";
        });
    }
    async measureItemsWidth() {
        await renderFinished();
        this.prepareToMeasureItems();
        this.widths = this.items.map(item => {
            // 1 is added because for width 100.44px the offsetWidth property is 100px and not 101px
            return item.offsetWidth + 1;
        });
    }
    normalizeSelection() {
        const selectedItems = this.items.filter(item => item.pressed);
        const selectedIndex = this._selectedItem ? selectedItems.indexOf(this._selectedItem) : -1;
        if (this._selectedItem && selectedItems.length > 1) {
            selectedItems.splice(selectedIndex, 1);
        }
        this._selectedItem = selectedItems.pop();
        if (this._selectedItem) {
            this.items.forEach(item => {
                item.pressed = false;
            });
            this._selectedItem.pressed = true;
        }
    }
    _selectItem(e) {
        const target = e.target;
        const isTargetSegmentedButtonItem = target.hasAttribute("ui5-segmented-button-item");
        if (target.disabled || target === this.getDomRef() || !isTargetSegmentedButtonItem) {
            return;
        }
        if (target !== this._selectedItem) {
            if (this._selectedItem) {
                this._selectedItem.pressed = false;
            }
            this._selectedItem = target;
            this.fireEvent("selection-change", {
                selectedItem: this._selectedItem,
            });
        }
        this._selectedItem.pressed = true;
        this._itemNavigation.setCurrentItem(this._selectedItem);
        this.selectedItem.focus();
        return this;
    }
    _onclick(e) {
        this._selectItem(e);
    }
    _onkeydown(e) {
        if (isEnter(e)) {
            this._selectItem(e);
        }
        else if (isSpace(e)) {
            e.preventDefault();
        }
    }
    _onkeyup(e) {
        if (isSpace(e)) {
            this._selectItem(e);
        }
    }
    _onmousedown(e) {
        const eventTarget = e.target;
        const isTargetSegmentedButtonItem = eventTarget.hasAttribute("ui5-segmented-button-item");
        if (isTargetSegmentedButtonItem) {
            eventTarget.focus();
            this._itemNavigation.setCurrentItem(eventTarget);
            this.hasPreviouslyFocusedItem = true;
        }
    }
    _onfocusin(e) {
        // If the component was previously focused,
        // update the ItemNavigation to sync the button's tabindex values
        if (this.hasPreviouslyFocusedItem) {
            this._itemNavigation.setCurrentItem(e.target);
            return;
        }
        // If the component is focused for the first time
        // focus the selected item if such is present
        if (this.selectedItem) {
            this.selectedItem.focus();
            this._itemNavigation.setCurrentItem(this._selectedItem);
            this.hasPreviouslyFocusedItem = true;
        }
    }
    async _doLayout() {
        const itemsHaveWidth = this.widths && this.widths.some(itemWidth => itemWidth > 2); // 2 pixels added for rounding
        if (!itemsHaveWidth) {
            await this.measureItemsWidth();
        }
        const parentWidth = this.parentNode ? this.parentNode.offsetWidth : 0;
        if (!this.style.width || this.percentageWidthSet) {
            this.style.width = `${Math.max(...this.widths) * this.items.length}px`;
            this.absoluteWidthSet = true;
        }
        this.items.forEach(item => {
            item.style.width = "100%";
        });
        if (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {
            this.style.width = "100%";
            this.percentageWidthSet = true;
        }
    }
    /**
     * Currently selected item.
     *
     * @readonly
     * @type {sap.ui.webc.main.ISegmentedButtonItem}
     * @name sap.ui.webc.main.SegmentedButton.prototype.selectedItem
     * @public
     */
    get selectedItem() {
        return this._selectedItem;
    }
    get ariaDescribedBy() {
        return SegmentedButton_1.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIBEDBY);
    }
    get ariaDescription() {
        return SegmentedButton_1.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);
    }
};
__decorate([
    property({ defaultValue: undefined })
], SegmentedButton.prototype, "accessibleName", void 0);
__decorate([
    slot({ type: HTMLElement, invalidateOnChildChange: true, "default": true })
], SegmentedButton.prototype, "items", void 0);
SegmentedButton = SegmentedButton_1 = __decorate([
    customElement({
        tag: "ui5-segmented-button",
        languageAware: true,
        renderer: litRender,
        template: SegmentedButtonTemplate,
        styles: SegmentedButtonCss,
        dependencies: [SegmentedButtonItem],
    })
    /**
     * Fired when the selected item changes.
     *
     * @event sap.ui.webc.main.SegmentedButton#selection-change
     * @param {HTMLElement} selectedItem the pressed item.
     * @public
     */
    ,
    event("selection-change", {
        detail: {
            selectedItem: { type: HTMLElement },
        },
    })
], SegmentedButton);
SegmentedButton.define();
export default SegmentedButton;
//# sourceMappingURL=SegmentedButton.js.map