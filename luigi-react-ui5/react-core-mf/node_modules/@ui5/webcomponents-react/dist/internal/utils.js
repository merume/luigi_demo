import { getEffectiveScopingSuffixForTag } from '@ui5/webcomponents-base/dist/CustomElementsScope.js';
import { Children, cloneElement, Fragment } from 'react';
export function flattenFragments(children) {
  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  const flatChildren = [];
  const removeFragments = function (element) {
    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    if (!element) {
      return;
    }
    if (Array.isArray(element)) {
      Children.toArray(element).forEach((child, index) => {
        removeFragments(child, level + 1, [...key, index]);
      });
      return;
    }
    if (element.type === Fragment && level <= depth) {
      Children.toArray(element.props?.children).forEach((item, index) => {
        removeFragments(item, level + 1, [...key, index]);
      });
    } else if (typeof element === 'string' || typeof element === 'number') {
      flatChildren.push(element);
    } else {
      flatChildren.push( /*#__PURE__*/cloneElement(element, {
        key: key.join('.')
      }));
    }
  };
  removeFragments(children);
  return flatChildren;
}
export const capitalizeFirstLetter = s => s.charAt(0).toUpperCase() + s.slice(1);
export const lowercaseFirstLetter = s => s.charAt(0).toLowerCase() + s.slice(1);
export const camelToKebabCase = s => s.replace(/([A-Z])/g, (a, b) => `-${b.toLowerCase()}`);
export const kebabToCamelCase = str => str.replace(/([-_]\w)/g, g => g[1].toUpperCase());
export function getUi5TagWithSuffix(baseTagName) {
  const tagNameSuffix = getEffectiveScopingSuffixForTag(baseTagName);
  return tagNameSuffix ? `${baseTagName}-${tagNameSuffix}` : baseTagName;
}
export const isSSR = () => typeof window === 'undefined';
export function trimAndRemoveSpaces(value) {
  return value.trim().replace(/\s\s+/g, ' ');
}