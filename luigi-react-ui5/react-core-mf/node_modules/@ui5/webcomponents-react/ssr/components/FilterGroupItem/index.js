'use client';

import circleTask2Icon from '@ui5/webcomponents-icons/dist/circle-task-2.js';
import { clsx } from 'clsx';
import React, { forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { FlexBoxDirection } from '../../enums';
import { BusyIndicatorSize } from '../../enums/BusyIndicatorSize';
import { addCustomCSSWithScoping } from '../../internal/addCustomCSSWithScoping';
import { Icon, TableCell, TableRow } from '../../webComponents';
import { BusyIndicator } from '../../webComponents/BusyIndicator';
import { Label } from '../../webComponents/Label';
import { FlexBox } from '../FlexBox';
import styles from './FilterGroupItem.jss';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
addCustomCSSWithScoping('ui5-table-row', `
/* hide navigated cell */
:host([data-component-name="FilterBarDialogTableRow"]) .ui5-table-row-navigated {
 display:none;
}
`);
const useStyles = createUseStyles(styles, {
  name: 'FilterGroupItem'
});
/**
 * Represents a filter belonging to the `FilterBar`.
 */
export const FilterGroupItem = /*#__PURE__*/forwardRef((props, ref) => {
  const classes = useStyles();
  const {
    groupName = 'default',
    considerGroupName,
    label = '',
    labelTooltip,
    required = false,
    visible = true,
    visibleInFilterBar,
    children,
    loading,
    className,
    slot,
    active,
    ...rest
  } = props;
  const inFB = props['data-in-fb'];
  const withValues = props['data-with-values'];
  const selected = props['data-selected'];
  if (!required && (!visible || inFB && !visibleInFilterBar)) return null;

  // todo use context instead of data attributes
  if (!inFB) {
    return (
      /*#__PURE__*/
      //todo: disable selection for required fields when it's possible, or the table is fully controllable (https://github.com/SAP/ui5-webcomponents/issues/5662)
      _jsxs(TableRow, {
        "data-react-key": props['data-react-key'],
        selected: selected,
        "data-required": required,
        "data-component-name": "FilterBarDialogTableRow",
        children: [/*#__PURE__*/_jsx(TableCell, {
          children: /*#__PURE__*/_jsxs(FlexBox, {
            direction: FlexBoxDirection.Column,
            children: [/*#__PURE__*/_jsx(Label, {
              className: classes.dialogCellLabel,
              title: labelTooltip ?? label,
              required: required,
              showColon: withValues,
              children: label
            }), withValues && children]
          })
        }), !withValues && /*#__PURE__*/_jsx(TableCell, {
          className: classes.dialogActiveCell,
          children: active && /*#__PURE__*/_jsx(Icon, {
            name: circleTask2Icon,
            className: classes.dialogActiveIcon
          })
        })]
      })
    );
  }
  return /*#__PURE__*/_jsx("div", {
    ref: ref,
    slot: slot,
    ...rest,
    className: clsx(classes.filterItem, className),
    children: /*#__PURE__*/_jsxs("div", {
      className: inFB ? classes.innerFilterItemContainer : classes.innerFilterItemContainerDialog,
      children: [/*#__PURE__*/_jsx(FlexBox, {
        children: /*#__PURE__*/_jsx(Label, {
          title: labelTooltip ?? label,
          required: required,
          showColon: true,
          children: `${considerGroupName && groupName !== 'default' ? `${groupName}: ` : ''}
          ${label}`
        })
      }), loading ? /*#__PURE__*/_jsx(BusyIndicator, {
        className: classes.loadingContainer,
        active: true,
        size: BusyIndicatorSize.Small
      }) : children]
    })
  });
});
FilterGroupItem.displayName = 'FilterGroupItem';
FilterGroupItem.defaultProps = {
  groupName: 'default',
  visible: true,
  required: false,
  label: ''
};