'use client';

import { useIsomorphicId } from '@ui5/webcomponents-react-base';
import React, { cloneElement, Fragment, isValidElement } from 'react';
import { createUseStyles } from 'react-jss';
import { WrappingType } from '../../enums';
import { flattenFragments } from '../../internal/utils';
import { Label } from '../../webComponents/Label';
import { useFormContext } from '../Form/FormContext';
const CENTER_ALIGNED_CHILDREN = new Set(['CheckBox', 'RadioButton', 'Switch', 'RangeSlider', 'Slider']);
const useStyles = createUseStyles({
  label: {
    gridColumnEnd: 'span var(--ui5wcr_form_label_span)',
    justifySelf: 'var(--ui5wcr_form_label_text_align)',
    textAlign: 'var(--ui5wcr_form_label_text_align)',
    '&[data-label-span="12"]': {
      justifySelf: 'start',
      paddingBlockEnd: '0.25rem'
    },
    '&:has(+ $content + [data-component-name="FormGroupTitle"])': {
      paddingBlockEnd: '1rem'
    },
    '&:has(+ $content > [ui5-checkbox])': {
      alignSelf: 'center'
    },
    '&:has(+ $content > [ui5-radio-button])': {
      alignSelf: 'center'
    },
    '&:has(+ $content > [ui5-switch])': {
      alignSelf: 'center'
    },
    '&:has(+ $content > [ui5-range-slider])': {
      alignSelf: 'center'
    },
    '&:has(+ $content > [ui5-slider])': {
      alignSelf: 'center'
    }
  },
  content: {
    display: 'flex',
    gridColumnEnd: 'span var(--ui5wcr_form_content_span)',
    '&[data-label-span="12"]': {
      gridColumnEnd: 'span 12',
      paddingBlockEnd: '0.625rem'
    },
    '&:has(+ [data-component-name="FormGroupTitle"])': {
      paddingBlockEnd: '1rem'
    }
  }
}, {
  name: 'FormItem'
});
function FormItemLabel(_ref) {
  let {
    label,
    style
  } = _ref;
  const classes = useStyles();
  const {
    labelSpan
  } = useFormContext();
  if (typeof label === 'string') {
    return /*#__PURE__*/React.createElement(Label, {
      className: classes.label,
      style: style,
      wrappingType: WrappingType.Normal,
      "data-label-span": labelSpan
    }, label ? `${label}:` : '');
  }
  if ( /*#__PURE__*/isValidElement(label)) {
    const {
      showColon,
      wrappingType,
      className,
      style: labelStyle,
      children
    } = label.props;
    return /*#__PURE__*/cloneElement(label, {
      showColon: showColon ?? true,
      wrappingType: wrappingType ?? WrappingType.Normal,
      className: `${classes.label} ${className ?? ''}`,
      style: {
        ...style,
        ...(labelStyle || {})
      },
      'data-label-span': labelSpan
    }, children ?? '');
  }
  return null;
}
const getContentForHtmlLabel = label => {
  if (typeof label === 'string') {
    return label;
  } else if ( /*#__PURE__*/isValidElement(label) && typeof label.props?.children === 'string') {
    return label.props.children;
  } else {
    return '';
  }
};

/**
 * A `FormItem` represents a row in a `Form`. A `FormItem` is a combination of one label and a component associated to this label.
 *
 * __Note__: The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.
 */
const FormItem = props => {
  // eslint-disable-next-line react/prop-types
  const {
    label,
    children,
    columnIndex,
    rowIndex
  } = props;
  const uniqueId = useIsomorphicId();
  const classes = useStyles();
  const {
    labelSpan
  } = useFormContext();
  const gridColumnStart = (columnIndex ?? 0) * 12 + 1;
  const contentGridColumnStart = columnIndex != null ? labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan ?? 0) : undefined;
  const calculatedGridRowStart = labelSpan === 12 ? (rowIndex ?? 0) + 1 : rowIndex ?? 0;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormItemLabel, {
    label: label,
    style: {
      gridColumnStart,
      gridRowStart: rowIndex ?? undefined,
      // TODO remove this line as soon as Firefox enables :has by default. https://caniuse.com/css-has
      alignSelf: CENTER_ALIGNED_CHILDREN.has(children?.type?.displayName) ? 'center' : undefined
    }
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.content,
    style: {
      gridColumnStart: contentGridColumnStart,
      gridRowStart: rowIndex != null ? calculatedGridRowStart : undefined
    },
    "data-label-span": labelSpan
  }, flattenFragments(children).map((child, index) => {
    // @ts-expect-error: type can't be string because of `isValidElement`
    if ( /*#__PURE__*/isValidElement(child) && child.type && child.type.$$typeof !== Symbol.for('react.portal')) {
      const content = getContentForHtmlLabel(label);
      const childId = child?.props?.id;
      return /*#__PURE__*/React.createElement(Fragment, {
        key: `${content}-${uniqueId}`
      }, /*#__PURE__*/cloneElement(child, {
        id: childId ?? `${uniqueId}-${index}`
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: childId ?? `${uniqueId}-${index}`,
        style: {
          display: 'none'
        },
        "aria-hidden": true
      }, content));
    }
    return undefined;
  })));
};
FormItem.displayName = 'FormItem';
export { FormItem };