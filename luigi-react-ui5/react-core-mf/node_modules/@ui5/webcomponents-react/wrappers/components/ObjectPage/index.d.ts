import React, { ReactElement, ReactNode } from 'react';
import { ObjectPageMode } from '../../enums';
import { CommonProps } from '../../interfaces';
import { ObjectPageSectionPropTypes } from '../ObjectPageSection';
export interface ObjectPagePropTypes extends Omit<CommonProps, 'placeholder'> {
    /**
     * Defines the upper, always static, title section of the `ObjectPage`.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `DynamicPageTitle` in order to preserve the intended design.
     * __Note:__ If not defined otherwise the prop `showSubHeaderRight` of the `DynamicPageTitle` is set to `true` by default.
     */
    headerTitle?: ReactElement;
    /**
     * Defines the dynamic header section of the `ObjectPage`.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `DynamicPageHeader` in order to preserve the intended design.
     */
    headerContent?: ReactElement;
    /**
     * React element which defines the footer content.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `Bar` with `design={BarDesign.FloatingFooter}` in order to preserve the intended design.
     */
    footer?: ReactElement;
    /**
     * Defines the image of the `ObjectPage`. You can pass a path to an image or an `Avatar` component.
     */
    image?: string | ReactElement;
    /**
     * Defines the content area of the `ObjectPage`. It consists of sections and subsections.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `ObjectPageSection` and `ObjectPageSubSection` in order to preserve the intended design.
     */
    children?: ReactElement<ObjectPageSectionPropTypes> | ReactElement<ObjectPageSectionPropTypes>[];
    /**
     * Defines the ID of the currently `ObjectPageSection` section.
     */
    selectedSectionId?: string;
    /**
     * Defines the ID of the currently `ObjectPageSubSection` section.
     */
    selectedSubSectionId?: string;
    /**
     * Defines whether the `headerContent` is hidden by scrolling down.
     */
    alwaysShowContentHeader?: boolean;
    /**
     * Defines whether the title is displayed in the content section of the header or above the image.
     */
    showTitleInHeaderContent?: boolean;
    /**
     * Defines whether the image should be displayed in a circle or in a square.<br />
     * __Note:__ If the `image` is not a `string`, this prop has no effect.
     */
    imageShapeCircle?: boolean;
    /**
     * Defines the `ObjectPage` mode.
     *
     * - "Default": All `ObjectPageSections` and `ObjectPageSubSections` are displayed on one page. Selecting tabs will scroll to the corresponding section.
     * - "IconTabBar": All `ObjectPageSections` are displayed on separate pages. Selecting tabs will lead to the corresponding page.
     */
    mode?: ObjectPageMode | keyof typeof ObjectPageMode;
    /**
     * Defines whether the pin button of the header is displayed.
     */
    showHideHeaderButton?: boolean;
    /**
     * Defines whether the `headerContent` is pinnable.
     */
    headerContentPinnable?: boolean;
    /**
     * Defines internally used a11y properties.
     */
    a11yConfig?: {
        objectPageTopHeader?: {
            role?: string;
            ariaRoledescription?: string;
        };
        dynamicPageAnchorBar?: {
            role?: string;
        };
    };
    /**
     * If set, only the specified placeholder will be displayed as content of the `ObjectPage`, no sections or sub-sections will be rendered.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use placeholder components like the `IllustratedMessage` or custom skeletons pages in order to preserve the intended design.
     */
    placeholder?: ReactNode;
    /**
     * Fired when the selected section changes.
     */
    onSelectedSectionChange?: (event: CustomEvent<{
        selectedSectionIndex: number;
        selectedSectionId: string;
        section: HTMLDivElement;
    }>) => void;
    /**
     * Fired when the `headerContent` is expanded or collapsed.
     */
    onToggleHeaderContent?: (visible: boolean) => void;
    /**
     * Fired when the `headerContent` changes its pinned state.
     */
    onPinnedStateChange?: (pinned: boolean) => void;
}
/**
 * A component that allows apps to easily display information related to a business object.
 *
 * The `ObjectPage` is composed of a header (title and content) and block content wrapped in sections and subsections that structure the information.
 */
declare const ObjectPage: React.ForwardRefExoticComponent<ObjectPagePropTypes & React.RefAttributes<HTMLDivElement>>;
export { ObjectPage };
