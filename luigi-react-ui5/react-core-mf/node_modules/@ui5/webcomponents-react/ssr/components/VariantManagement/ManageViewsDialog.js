import { isPhone, isTablet } from '@ui5/webcomponents-base/dist/Device.js';
import searchIcon from '@ui5/webcomponents-icons/dist/search.js';
import { ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';
import React, { Children, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign, FlexBoxAlignItems, FlexBoxDirection } from '../../enums';
import { ButtonDesign } from '../../enums/ButtonDesign';
import { APPLY_AUTOMATICALLY, CANCEL, CREATED_BY, DEFAULT, MANAGE_VIEWS, SAVE, SHARING, VIEW, SEARCH } from '../../i18n/i18n-defaults';
import { useCanRenderPortal } from '../../internal/ssr';
import { Icon, Input } from '../../webComponents';
import { Bar } from '../../webComponents/Bar';
import { Button } from '../../webComponents/Button';
import { Dialog } from '../../webComponents/Dialog';
import { Table } from '../../webComponents/Table';
import { TableColumn } from '../../webComponents/TableColumn';
import { FlexBox } from '../FlexBox';
import { ManageViewsTableRows } from './ManageViewsTableRows';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { createElement as _createElement } from "react";
const styles = {
  manageViewsDialog: {
    width: isPhone() || isTablet() ? '100%' : '70vw',
    '&::part(content), &::part(header)': {
      padding: 0
    },
    '&::part(footer)': {
      padding: 0,
      borderBlockStart: 'none'
    }
  },
  headerText: {
    margin: 0,
    textAlign: 'center',
    alignSelf: 'start',
    minHeight: 'var(--_ui5_popup_default_header_height)',
    maxHeight: 'var(--_ui5_popup_default_header_height)',
    lineHeight: 'var(--_ui5_popup_default_header_height)',
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    whiteSpace: 'nowrap',
    maxWidth: '100%',
    display: 'inline-block',
    paddingInlineStart: '1rem',
    fontFamily: '"72override",var(--_ui5_popup_header_font_family)',
    fontSize: '1rem'
  },
  search: {
    width: 'calc(100% - 2rem)',
    marginBlockEnd: '0.5rem'
  },
  inputIcon: {
    cursor: 'pointer',
    color: ThemingParameters.sapContent_IconColor
  }
};
const useStyles = createUseStyles(styles, {
  name: 'ManageViewsDialog'
});
export const ManageViewsDialog = props => {
  const {
    children,
    onAfterClose,
    handleSaveManageViews,
    showShare,
    showApplyAutomatically,
    showSetAsDefault,
    showCreatedBy,
    variantNames,
    portalContainer,
    showOnlyFavorites
  } = props;
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const cancelText = i18nBundle.getText(CANCEL);
  const saveText = i18nBundle.getText(SAVE);
  const viewHeaderText = i18nBundle.getText(VIEW);
  const sharingHeaderText = i18nBundle.getText(SHARING);
  const defaultHeaderText = i18nBundle.getText(DEFAULT);
  const applyAutomaticallyHeaderText = i18nBundle.getText(APPLY_AUTOMATICALLY);
  const createdByHeaderText = i18nBundle.getText(CREATED_BY);
  const manageViewsText = i18nBundle.getText(MANAGE_VIEWS);
  const searchText = i18nBundle.getText(SEARCH);
  const [changedVariantNames, setChangedVariantNames] = useState(new Map());
  const [invalidVariants, setInvalidVariants] = useState({});
  const classes = useStyles();
  const columns = /*#__PURE__*/_jsxs(_Fragment, {
    children: [showOnlyFavorites && /*#__PURE__*/_jsx(TableColumn, {}, "favorite-variant-item"), /*#__PURE__*/_jsx(TableColumn, {
      children: viewHeaderText
    }), showShare && /*#__PURE__*/_jsx(TableColumn, {
      demandPopin: true,
      minWidth: 600,
      children: sharingHeaderText
    }), showSetAsDefault && /*#__PURE__*/_jsx(TableColumn, {
      demandPopin: true,
      minWidth: 600,
      popinText: defaultHeaderText,
      children: defaultHeaderText
    }), showApplyAutomatically && /*#__PURE__*/_jsx(TableColumn, {
      demandPopin: true,
      minWidth: 600,
      popinText: applyAutomaticallyHeaderText,
      children: applyAutomaticallyHeaderText
    }), showCreatedBy && /*#__PURE__*/_jsx(TableColumn, {
      demandPopin: true,
      minWidth: 600,
      popinText: createdByHeaderText,
      children: createdByHeaderText
    }), /*#__PURE__*/_jsx(TableColumn, {}, "delete-variant-item")]
  });
  const [childrenProps, setChildrenProps] = useState(Children.map(children, child => {
    if (! /*#__PURE__*/React.isValidElement(child)) {
      return {};
    }
    return child.props;
  }));
  useEffect(() => {
    setChildrenProps(Children.map(children, child => {
      if (! /*#__PURE__*/React.isValidElement(child)) {
        return {};
      }
      return child.props;
    }));
  }, [children]);
  const [filteredProps, setFilteredProps] = useState(childrenProps);
  useEffect(() => {
    setFilteredProps(childrenProps);
  }, [childrenProps]);
  const [defaultView, setDefaultView] = useState();
  const changedTableRows = useRef({});
  const handleTableRowChange = (e, payload) => {
    if (payload) {
      changedTableRows.current[payload.currentVariant] = {
        ...(changedTableRows.current[payload.currentVariant] ?? {}),
        ...payload
      };
    }
  };
  const deletedTableRows = useRef(new Set([]));
  const handleDelete = e => {
    deletedTableRows.current.add(e.target.dataset.children);
    setChildrenProps(prev => prev.filter(item => item.children !== e.target.dataset.children).map(item => {
      if (changedTableRows.current.hasOwnProperty(item.children)) {
        return {
          ...item,
          ...changedTableRows.current[item.children]
        };
      }
      return item;
    }));
  };
  const handleSave = e => {
    if (Object.keys(invalidVariants).length === 0) {
      handleSaveManageViews(e, {
        updatedRows: changedTableRows.current,
        defaultView,
        deletedRows: deletedTableRows.current
      });
    } else {
      Object.values(invalidVariants)[0].focus();
    }
  };
  const handleSearchInput = e => {
    const lowerCaseVal = e.target.value.toLowerCase();
    setFilteredProps(childrenProps.filter(item => item.children?.toLowerCase()?.includes(lowerCaseVal) || item.author?.toLowerCase()?.includes(lowerCaseVal)));
  };
  const canRenderPortal = useCanRenderPortal();
  if (!canRenderPortal) {
    return null;
  }
  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(Dialog, {
    open: true,
    className: classes.manageViewsDialog,
    "data-component-name": "VariantManagementManageViewsDialog",
    onAfterClose: onAfterClose,
    headerText: manageViewsText,
    header: /*#__PURE__*/_jsxs(FlexBox, {
      direction: FlexBoxDirection.Column,
      style: {
        width: '100%'
      },
      alignItems: FlexBoxAlignItems.Center,
      children: [/*#__PURE__*/_jsx("h2", {
        className: classes.headerText,
        children: manageViewsText
      }), /*#__PURE__*/_jsx(Input, {
        className: classes.search,
        placeholder: searchText,
        showClearIcon: true,
        icon: /*#__PURE__*/_jsx(Icon, {
          name: searchIcon,
          className: classes.inputIcon
        }),
        onInput: handleSearchInput
      })]
    }),
    resizable: true,
    footer: /*#__PURE__*/_jsx(Bar, {
      design: BarDesign.Footer,
      endContent: /*#__PURE__*/_jsxs(_Fragment, {
        children: [/*#__PURE__*/_jsx(Button, {
          design: ButtonDesign.Emphasized,
          onClick: handleSave,
          children: saveText
        }), /*#__PURE__*/_jsx(Button, {
          design: ButtonDesign.Transparent,
          onClick: onAfterClose,
          children: cancelText
        })]
      })
    }),
    children: /*#__PURE__*/_jsx(Table, {
      columns: columns,
      stickyColumnHeader: true,
      role: "table",
      children: filteredProps.map(itemProps => {
        return /*#__PURE__*/_createElement(ManageViewsTableRows, {
          ...itemProps,
          setInvalidVariants: setInvalidVariants,
          setChangedVariantNames: setChangedVariantNames,
          changedVariantNames: changedVariantNames,
          variantNames: variantNames,
          handleRowChange: handleTableRowChange,
          handleDelete: handleDelete,
          defaultView: defaultView,
          setDefaultView: setDefaultView,
          showShare: showShare,
          showApplyAutomatically: showApplyAutomatically,
          showSetAsDefault: showSetAsDefault,
          showCreatedBy: showCreatedBy,
          key: itemProps?.children,
          showOnlyFavorites: showOnlyFavorites
        });
      })
    })
  }), portalContainer ?? document.body);
};