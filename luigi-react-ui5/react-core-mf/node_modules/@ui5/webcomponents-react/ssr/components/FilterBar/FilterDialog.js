import group2Icon from '@ui5/webcomponents-icons/dist/group-2.js';
import listIcon from '@ui5/webcomponents-icons/dist/list.js';
import searchIcon from '@ui5/webcomponents-icons/dist/search.js';
import { enrichEventWithDetails, useI18nBundle } from '@ui5/webcomponents-react-base';
import React, { Children, cloneElement, useEffect, useReducer, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign, ButtonDesign, FlexBoxDirection, FlexBoxJustifyContent, TableMode, TitleLevel, ToolbarStyle } from '../../enums';
import { ACTIVE, ALL, BASIC, CANCEL, FIELD, FIELDS_BY_ATTRIBUTE, FILTERS, GROUP_VIEW, HIDE_VALUES, LIST_VIEW, MANDATORY, OK, RESET, SEARCH_FOR_FILTERS, SHOW_VALUES, VISIBLE, VISIBLE_AND_ACTIVE } from '../../i18n/i18n-defaults';
import { addCustomCSSWithScoping } from '../../internal/addCustomCSSWithScoping';
import { useCanRenderPortal } from '../../internal/ssr';
import { stopPropagation } from '../../internal/stopPropagation';
import { Bar, Button, Dialog, Icon, Input, Option, Panel, SegmentedButton, SegmentedButtonItem, Select, Table, TableColumn, Title } from '../../webComponents';
import { FlexBox } from '../FlexBox';
import { Toolbar } from '../Toolbar';
import { ToolbarSpacer } from '../ToolbarSpacer';
import styles from './FilterBarDialog.jss';
import { filterValue, syncRef } from './utils';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
addCustomCSSWithScoping('ui5-table', `
/* hide table header of panel table */
:host([data-component-name="FilterBarDialogPanelTable"]) thead {
  visibility: collapse;
}
/* don't display border of panel table */
:host([data-component-name="FilterBarDialogPanelTable"]) table {
  border-collapse: unset;
}

/* don't allow table cells to grow
todo: FilterBarDialogPanelTable
*/
:host([data-component-name="FilterBarDialogTable"]) table{
  table-layout: fixed;
}

:host([data-component-name="FilterBarDialogPanelTable"]) .ui5-table-root {
  border-bottom: none;
}
/* don't display select all checkbox */
:host([data-component-name="FilterBarDialogTable"]) thead th.ui5-table-select-all-column [ui5-checkbox] {
 visibility: hidden;
}

:host([data-component-name="FilterBarDialogPanelTable"]) thead th.ui5-table-select-all-column {
 display: none;
}
 `);
const getActiveFilters = (activeFilterAttribute, filter) => {
  switch (activeFilterAttribute) {
    case 'all':
      return true;
    case 'visible':
      return filter.props?.visibleInFilterBar;
    case 'active':
      return filter.props?.active;
    case 'visibleAndActive':
      return filter.props?.visibleInFilterBar && filter.props?.active;
    case 'mandatory':
      return filter.props?.required;
    default:
      return true;
  }
};
const compareObjects = (firstObj, secondObj) => Object.keys(firstObj).find(first => Object.keys(secondObj).every(second => firstObj[second] !== secondObj[first]));
const useStyles = createUseStyles(styles, {
  name: 'FilterBarDialog'
});
export const FilterDialog = props => {
  const {
    filterBarRefs,
    open,
    handleDialogClose,
    children,
    showRestoreButton,
    handleRestoreFilters,
    handleDialogSave,
    handleSelectionChange,
    handleDialogSearch,
    handleDialogCancel,
    onAfterFiltersDialogOpen,
    portalContainer,
    dialogRef,
    isListView,
    setIsListView,
    filteredAttribute,
    setFilteredAttribute
  } = props;
  const classes = useStyles();
  const [searchString, setSearchString] = useState('');
  const [toggledFilters, setToggledFilters] = useState({});
  const dialogRefs = useRef({});
  const dialogSearchRef = useRef(null);
  const [showValues, toggleValues] = useReducer(prev => !prev, false);
  const [forceRequired, setForceRequired] = useState();
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const basicText = i18nBundle.getText(BASIC);
  const cancelText = i18nBundle.getText(CANCEL);
  const okText = i18nBundle.getText(OK);
  const searchForFiltersText = i18nBundle.getText(SEARCH_FOR_FILTERS);
  const filtersTitle = i18nBundle.getText(FILTERS);
  const resetText = i18nBundle.getText(RESET);
  const allText = i18nBundle.getText(ALL);
  const activeText = i18nBundle.getText(ACTIVE);
  const visibleText = i18nBundle.getText(VISIBLE);
  const visibleAndActiveText = i18nBundle.getText(VISIBLE_AND_ACTIVE);
  const mandatoryText = i18nBundle.getText(MANDATORY);
  const listViewText = i18nBundle.getText(LIST_VIEW);
  const groupViewText = i18nBundle.getText(GROUP_VIEW);
  const showValuesText = i18nBundle.getText(SHOW_VALUES);
  const hideValuesText = i18nBundle.getText(HIDE_VALUES);
  const fieldText = i18nBundle.getText(FIELD);
  const fieldsByAttributeText = i18nBundle.getText(FIELDS_BY_ATTRIBUTE);
  const handleSearch = e => {
    if (handleDialogSearch) {
      handleDialogSearch(enrichEventWithDetails(e, {
        value: e.target.value,
        element: e.target
      }));
    }
    setSearchString(e.target.value);
  };
  const handleSave = e => {
    handleDialogSave(e, dialogRefs.current, toggledFilters);
  };
  const handleClose = e => {
    setToggledFilters({});
    stopPropagation(e);
    if (handleDialogCancel) {
      handleDialogCancel(e);
    }
    handleDialogClose(e);
  };
  const handleCancel = e => {
    if (handleDialogCancel) {
      handleDialogCancel(e);
    }
    handleDialogClose(e);
  };
  const handleRestore = e => {
    setToggledFilters({});
    handleRestoreFilters(e, 'dialog', {
      filters: Array.from(dialogRef.current.querySelectorAll('ui5-table-row'))
    });
  };
  const handleViewChange = e => {
    setIsListView(e.detail.selectedItem.dataset.id === 'list');
  };
  const renderChildren = () => {
    return children.filter(item => {
      return !!item?.props && item.props?.visible && (item.props?.label?.toLowerCase().includes(searchString.toLowerCase()) || searchString.length === 0) && getActiveFilters(filteredAttribute, item);
    }).map(child => {
      const filterBarItemRef = filterBarRefs.current[child.key];
      let filterItemProps = {};
      if (filterBarItemRef) {
        filterItemProps = filterValue(filterBarItemRef, child);
      }
      if (!child.props.children) return child;
      let isSelected = child.props.visibleInFilterBar || child.props.required || child.type.displayName !== 'FilterGroupItem';
      if (Object.hasOwn(toggledFilters, child.key)) {
        isSelected = toggledFilters[child.key];
      }
      return /*#__PURE__*/cloneElement(child, {
        'data-with-values': showValues,
        'data-selected': isSelected,
        'data-react-key': child.key,
        children: {
          ...child.props.children,
          props: {
            ...child.props.children.props,
            ...filterItemProps
          },
          ref: node => {
            if (node) {
              dialogRefs.current[child.key] = node;
              syncRef(child.props.children.ref, node);
            }
          }
        }
      });
    });
  };
  const handleAttributeFilterChange = e => {
    setFilteredAttribute(e.detail.selectedOption.dataset.id);
  };
  const handleCheckBoxChange = e => {
    e.preventDefault();

    // todo: could be unwanted behavior: https://github.com/SAP/ui5-webcomponents-react/issues/3928
    if (!e.target.hasAttribute('ui5-table')) {
      return;
    }
    const prevRowsByKey = e.detail.previouslySelectedRows.reduce((acc, prevSelRow) => ({
      ...acc,
      [prevSelRow.dataset.reactKey]: prevSelRow
    }), {});
    const rowsByKey = e.detail.selectedRows.reduce((acc, selRow) => ({
      ...acc,
      [selRow.dataset.reactKey]: selRow
    }), {});
    const changedRowKey = e.detail.previouslySelectedRows > e.detail.selectedRows ? compareObjects(prevRowsByKey, rowsByKey) : compareObjects(rowsByKey, prevRowsByKey);
    const element = rowsByKey[changedRowKey] || prevRowsByKey[changedRowKey];

    // todo: workaround until specific rows can be disabled
    if (element.dataset?.required === 'true') {
      setForceRequired(element);
      return;
    }
    if (typeof handleSelectionChange === 'function') {
      handleSelectionChange(enrichEventWithDetails(e, {
        element,
        checked: element.selected
      }));
    }
    setToggledFilters(prev => {
      return {
        ...prev,
        [changedRowKey]: element.selected
      };
    });
  };
  useEffect(() => {
    if (forceRequired) {
      forceRequired.setAttribute('selected', 'true');
      setForceRequired(undefined);
    }
  }, [forceRequired]);
  const canRenderPortal = useCanRenderPortal();
  if (!canRenderPortal) {
    return null;
  }
  const renderGroups = () => {
    const groups = {};
    Children.forEach(renderChildren(), child => {
      const childGroups = child.props.groupName ?? 'default';
      if (groups[childGroups]) {
        groups[childGroups].push(child);
      } else {
        groups[childGroups] = [child];
      }
    });
    const filterGroups = Object.keys(groups).sort((x, y) => x === 'default' ? -1 : y === 'role' ? 1 : 0).map((item, index) => {
      return /*#__PURE__*/_jsx(Panel, {
        headerText: item === 'default' ? basicText : item,
        className: classes.groupPanel,
        children: /*#__PURE__*/_jsx(Table, {
          className: classes.table,
          mode: TableMode.MultiSelect,
          "data-component-name": "FilterBarDialogPanelTable",
          onSelectionChange: handleCheckBoxChange,
          children: groups[item]
        })
      }, `${item === 'default' ? basicText : item}${index}`);
    });
    return filterGroups;
  };
  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxs(Dialog, {
    open: open,
    ref: dialogRef,
    "data-component-name": "FilterBarDialog",
    onAfterClose: handleClose,
    onAfterOpen: onAfterFiltersDialogOpen,
    resizable: true,
    draggable: true,
    className: classes.dialogComponent,
    preventFocusRestore: true,
    header: /*#__PURE__*/_jsx(Bar, {
      design: BarDesign.Header,
      startContent: /*#__PURE__*/_jsx(Title, {
        level: TitleLevel.H4,
        title: filtersTitle,
        children: filtersTitle
      }),
      endContent: showRestoreButton && /*#__PURE__*/_jsx(Button, {
        design: ButtonDesign.Transparent,
        onClick: handleRestore,
        children: resetText
      })
    }),
    footer: /*#__PURE__*/_jsx(Bar, {
      design: BarDesign.Footer,
      endContent: /*#__PURE__*/_jsxs(FlexBox, {
        justifyContent: FlexBoxJustifyContent.End,
        className: classes.footer,
        children: [/*#__PURE__*/_jsx(Button, {
          onClick: handleSave,
          "data-component-name": "FilterBarDialogSaveBtn",
          design: ButtonDesign.Emphasized,
          children: okText
        }), /*#__PURE__*/_jsx(Button, {
          design: ButtonDesign.Transparent,
          onClick: handleCancel,
          "data-component-name": "FilterBarDialogCancelBtn",
          children: cancelText
        })]
      })
    }),
    children: [/*#__PURE__*/_jsxs(FlexBox, {
      direction: FlexBoxDirection.Column,
      className: classes.subheaderContainer,
      children: [/*#__PURE__*/_jsxs(Toolbar, {
        className: classes.subheader,
        toolbarStyle: ToolbarStyle.Clear,
        children: [/*#__PURE__*/_jsxs(Select, {
          onChange: handleAttributeFilterChange,
          title: fieldsByAttributeText,
          accessibleName: fieldsByAttributeText,
          children: [/*#__PURE__*/_jsx(Option, {
            selected: filteredAttribute === 'all',
            "data-id": "all",
            children: allText
          }), /*#__PURE__*/_jsx(Option, {
            selected: filteredAttribute === 'visible',
            "data-id": "visible",
            children: visibleText
          }), /*#__PURE__*/_jsx(Option, {
            selected: filteredAttribute === 'active',
            "data-id": "active",
            children: activeText
          }), /*#__PURE__*/_jsx(Option, {
            selected: filteredAttribute === 'visibleAndActive',
            "data-id": "visibleAndActive",
            children: visibleAndActiveText
          }), /*#__PURE__*/_jsx(Option, {
            selected: filteredAttribute === 'mandatory',
            "data-id": "mandatory",
            children: mandatoryText
          })]
        }), /*#__PURE__*/_jsx(ToolbarSpacer, {}), /*#__PURE__*/_jsx(Button, {
          design: ButtonDesign.Transparent,
          onClick: toggleValues,
          "aria-live": "polite",
          children: showValues ? hideValuesText : showValuesText
        }), /*#__PURE__*/_jsxs(SegmentedButton, {
          onSelectionChange: handleViewChange,
          children: [/*#__PURE__*/_jsx(SegmentedButtonItem, {
            icon: listIcon,
            "data-id": "list",
            pressed: isListView,
            accessibleName: listViewText
          }), /*#__PURE__*/_jsx(SegmentedButtonItem, {
            icon: group2Icon,
            "data-id": "group",
            pressed: !isListView,
            accessibleName: groupViewText
          })]
        })]
      }), /*#__PURE__*/_jsx(FlexBox, {
        className: classes.searchInputContainer,
        children: /*#__PURE__*/_jsx(Input, {
          noTypeahead: true,
          placeholder: searchForFiltersText,
          onInput: handleSearch,
          showClearIcon: true,
          icon: /*#__PURE__*/_jsx(Icon, {
            name: searchIcon
          }),
          ref: dialogSearchRef,
          className: classes.searchInput,
          "data-component-name": "FilterBarDialogSearchInput"
        })
      })]
    }), /*#__PURE__*/_jsx(Table, {
      "data-component-name": "FilterBarDialogTable",
      hideNoData: !isListView,
      className: classes.table,
      mode: TableMode.MultiSelect,
      onSelectionChange: handleCheckBoxChange,
      columns: /*#__PURE__*/_jsxs(_Fragment, {
        children: [/*#__PURE__*/_jsx(TableColumn, {
          children: fieldText
        }), !showValues && /*#__PURE__*/_jsx(TableColumn, {
          className: classes.tHactive,
          children: activeText
        })]
      }),
      children: isListView && renderChildren()
    }), !isListView && renderGroups()]
  }), portalContainer ?? document.body);
};