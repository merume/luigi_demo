import { useI18nBundle, useIsomorphicId } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign, ButtonDesign, FlexBoxAlignItems, FlexBoxDirection } from '../../enums';
import { APPLY_AUTOMATICALLY, CANCEL, FILE_ALREADY_EXISTS, PUBLIC, SAVE, SAVE_VIEW, SET_AS_DEFAULT, SPECIFY_VIEW_NAME, VIEW } from '../../i18n/i18n-defaults';
import { useCanRenderPortal } from '../../internal/ssr';
import { trimAndRemoveSpaces } from '../../internal/utils';
import { Bar, Button, CheckBox, Dialog, Input, Label } from '../../webComponents';
import { FlexBox } from '../FlexBox';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const useStyles = createUseStyles({
  dialog: {
    '&::part(footer)': {
      borderBlockStart: 'none',
      padding: 0
    }
  },
  input: {
    width: '100%',
    marginBlock: '0.1875rem'
  },
  checkBoxesContainer: {
    paddingInline: '0.5rem'
  }
}, {
  name: 'SaveViewDialogStyles'
});
export const SaveViewDialog = props => {
  const {
    onAfterClose,
    handleSave,
    selectedVariant,
    showShare,
    showApplyAutomatically,
    showSetAsDefault,
    variantNames,
    portalContainer,
    saveViewInputProps
  } = props;
  const saveViewDialogRef = useRef(null);
  const inputRef = useRef(undefined);
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const classes = useStyles();
  const uniqueId = useIsomorphicId();
  const cancelText = i18nBundle.getText(CANCEL);
  const saveText = i18nBundle.getText(SAVE);
  const headingText = i18nBundle.getText(SAVE_VIEW);
  const defaultCbLabel = i18nBundle.getText(SET_AS_DEFAULT);
  const publicCbLabel = i18nBundle.getText(PUBLIC);
  const applyAutomaticallyCbLabel = i18nBundle.getText(APPLY_AUTOMATICALLY);
  const inputLabelText = i18nBundle.getText(VIEW);
  const errorTextAlreadyExists = i18nBundle.getText(FILE_ALREADY_EXISTS);
  const errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);
  const [isDefault, setDefault] = useState(selectedVariant.isDefault);
  const [isPublic, setPublic] = useState(selectedVariant.global);
  const [applyAutomatically, setApplyAutomatically] = useState(selectedVariant.applyAutomatically);
  const [variantName, setVariantName] = useState(selectedVariant.children);
  const [variantNameInvalid, setVariantNameInvalid] = useState(false);
  const [isInvalid, setIsInvalid] = useState(false);
  const handleInputChange = e => {
    if (typeof saveViewInputProps?.onInput === 'function') {
      saveViewInputProps.onInput(e);
    }
    const trimmedValue = trimAndRemoveSpaces(e.target.value);
    setVariantName(trimmedValue);
    if (variantNames.includes(trimmedValue)) {
      setVariantNameInvalid(errorTextAlreadyExists);
    } else if (trimmedValue.length === 0) {
      setVariantNameInvalid(errorTextEmpty);
    } else if (e.isInvalid) {
      setIsInvalid(true);
    } else {
      setVariantNameInvalid(false);
      setIsInvalid(false);
    }
  };
  const onSave = e => {
    if (variantNames.includes(variantName)) {
      setVariantNameInvalid(errorTextAlreadyExists);
      inputRef.current?.focus();
    } else if (variantName.length === 0) {
      setVariantNameInvalid(errorTextEmpty);
      inputRef.current?.focus();
    } else if (isInvalid) {
      inputRef.current?.focus();
    } else {
      setVariantNameInvalid(false);
      handleSave(e, {
        ...selectedVariant,
        children: variantName,
        isDefault,
        global: isPublic,
        applyAutomatically
      });
    }
  };
  const handleCancel = () => {
    saveViewDialogRef.current.close();
  };
  const handleChangeDefault = e => {
    setDefault(e.target.checked);
  };
  const handleChangePublic = e => {
    setPublic(e.target.checked);
  };
  const handleChangeApplyAutomatically = e => {
    setApplyAutomatically(e.target.checked);
  };
  const canRenderPortal = useCanRenderPortal();
  if (!canRenderPortal) {
    return null;
  }
  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(Dialog, {
    open: true,
    className: classes.dialog,
    ref: saveViewDialogRef,
    headerText: headingText,
    onAfterClose: onAfterClose,
    footer: /*#__PURE__*/_jsx(Bar, {
      design: BarDesign.Footer,
      endContent: /*#__PURE__*/_jsxs(_Fragment, {
        children: [/*#__PURE__*/_jsx(Button, {
          design: ButtonDesign.Emphasized,
          onClick: onSave,
          children: saveText
        }), /*#__PURE__*/_jsx(Button, {
          design: ButtonDesign.Transparent,
          onClick: handleCancel,
          children: cancelText
        })]
      })
    }),
    children: /*#__PURE__*/_jsxs(FlexBox, {
      direction: FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.Start,
      children: [/*#__PURE__*/_jsx(Label, {
        for: `view-${uniqueId}`,
        showColon: true,
        children: inputLabelText
      }), /*#__PURE__*/_jsx(Input, {
        accessibleName: inputLabelText,
        ref: inputRef,
        ...saveViewInputProps,
        valueState: saveViewInputProps?.valueState ?? (!variantNameInvalid ? 'None' : 'Error'),
        valueStateMessage: saveViewInputProps?.valueStateMessage ?? /*#__PURE__*/_jsx("div", {
          children: variantNameInvalid
        }),
        className: clsx(classes.input, saveViewInputProps?.className),
        id: `view-${uniqueId}`,
        value: variantName,
        onInput: handleInputChange
      }), /*#__PURE__*/_jsxs(FlexBox, {
        alignItems: FlexBoxAlignItems.Start,
        direction: FlexBoxDirection.Column,
        className: classes.checkBoxesContainer,
        children: [showSetAsDefault && /*#__PURE__*/_jsx(CheckBox, {
          onChange: handleChangeDefault,
          text: defaultCbLabel,
          checked: isDefault
        }), showShare && /*#__PURE__*/_jsx(CheckBox, {
          onChange: handleChangePublic,
          text: publicCbLabel,
          checked: isPublic
        }), showApplyAutomatically && /*#__PURE__*/_jsx(CheckBox, {
          onChange: handleChangeApplyAutomatically,
          text: applyAutomaticallyCbLabel,
          checked: applyAutomatically
        })]
      })]
    })
  }), portalContainer ?? document.body);
};