'use client';

import iconSlimArrowLeft from '@ui5/webcomponents-icons/dist/slim-arrow-left.js';
import { ThemingParameters, useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { Children, forwardRef, Fragment, isValidElement, useCallback, useEffect, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { ButtonDesign } from '../../enums/ButtonDesign';
import { FlexBoxDirection } from '../../enums/FlexBoxDirection';
import { TitleLevel } from '../../enums/TitleLevel';
import { ValueState } from '../../enums/ValueState';
import { ALL, LIST_NO_DATA } from '../../i18n/i18n-defaults';
import { MessageViewContext } from '../../internal/MessageViewContext';
import { Bar } from '../../webComponents/Bar';
import { Button } from '../../webComponents/Button';
import { GroupHeaderListItem } from '../../webComponents/GroupHeaderListItem';
import { Icon } from '../../webComponents/Icon';
import { List } from '../../webComponents/List';
import { SegmentedButton } from '../../webComponents/SegmentedButton';
import { SegmentedButtonItem } from '../../webComponents/SegmentedButtonItem';
import { Title } from '../../webComponents/Title';
import { FlexBox } from '../FlexBox';
import { getIconNameForType } from './utils';
export const resolveMessageTypes = children => {
  return (children ?? []).map(message => message?.props?.type).reduce((acc, type) => {
    const finalType = type === ValueState.None ? ValueState.Information : type;
    if (acc.hasOwnProperty(finalType)) {
      acc[finalType]++;
    }
    return acc;
  }, {
    [ValueState.Error]: 0,
    [ValueState.Warning]: 0,
    [ValueState.Success]: 0,
    [ValueState.Information]: 0
  });
};
export const resolveMessageGroups = children => {
  const groups = (children ?? []).reduce((acc, val) => {
    const groupName = val?.props?.groupName ?? '';
    if (acc.hasOwnProperty(groupName)) {
      acc[groupName].push(val);
    } else {
      acc[groupName] = [val];
    }
    return acc;
  }, {});
  return Object.entries(groups).sort((a, b) => {
    return a[0].localeCompare(b[0]);
  });
};
const useStyles = createUseStyles({
  container: {
    width: '100%',
    overflowX: 'hidden',
    overflowY: 'auto',
    display: 'flex',
    height: '100%',
    '& > *': {
      width: '100%',
      flexShrink: 0,
      transition: 'transform 200ms ease-in-out'
    }
  },
  showDetails: {
    '& > *': {
      transform: 'translateX(-100%)'
    }
  },
  button: {
    '&[data-key="Error"]:not([pressed])': {
      color: ThemingParameters.sapNegativeElementColor
    },
    '&[data-key="Warning"]:not([pressed])': {
      color: ThemingParameters.sapCriticalElementColor
    },
    '&[data-key="Success"]:not([pressed])': {
      color: ThemingParameters.sapPositiveElementColor
    },
    '&[data-key="Information"]:not([pressed])': {
      color: ThemingParameters.sapNeutralElementColor
    }
  },
  detailsContainer: {
    padding: '1rem'
  },
  detailsIcon: {
    flexShrink: 0,
    margin: '0 1rem 0 0.5rem',
    '&[data-type="Error"]': {
      color: ThemingParameters.sapNegativeElementColor
    },
    '&[data-type="Warning"]': {
      color: ThemingParameters.sapCriticalElementColor
    },
    '&[data-type="Success"]': {
      color: ThemingParameters.sapPositiveElementColor
    },
    '&[data-type="Information"],&[data-type="None"]': {
      color: ThemingParameters.sapNeutralElementColor
    }
  },
  detailsTitle: {
    marginBottom: '1rem'
  },
  detailsText: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    lineHeight: 1.4,
    color: ThemingParameters.sapTextColor,
    marginBottom: '1rem'
  }
}, {
  name: 'MessageView'
});

/**
 * The `MessageView` is used to display a summarized list of different types of messages (error, warning, success, and information messages).
 */
const MessageView = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    groupItems,
    showDetailsPageHeader,
    className,
    onItemSelect,
    ...rest
  } = props;
  const [componentRef, internalRef] = useSyncRef(ref);
  const classes = useStyles();
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const [listFilter, setListFilter] = useState('All');
  const [selectedMessage, setSelectedMessage] = useState(null);
  const childrenArray = Children.toArray(children);
  const messageTypes = resolveMessageTypes(childrenArray);
  const filledTypes = Object.values(messageTypes).filter(count => count > 0).length;
  const filteredChildren = listFilter === 'All' ? childrenArray : childrenArray.filter(message => {
    if (! /*#__PURE__*/isValidElement(message)) {
      return false;
    }
    if (listFilter === ValueState.Information) {
      return message?.props?.type === ValueState.Information || message?.props?.type === ValueState.None;
    }
    return message?.props?.type === listFilter;
  });
  const groupedMessages = resolveMessageGroups(filteredChildren);
  const navigateBack = useCallback(() => {
    setSelectedMessage(null);
  }, [setSelectedMessage]);
  useEffect(() => {
    if (internalRef.current) {
      internalRef.current.navigateBack = navigateBack;
    }
  }, [internalRef.current, navigateBack]);
  const handleListFilterChange = e => {
    setListFilter(e.detail.selectedItem.dataset.key);
  };
  const outerClasses = clsx(classes.container, className, selectedMessage && classes.showDetails);
  return /*#__PURE__*/React.createElement("div", {
    ref: componentRef,
    ...rest,
    className: outerClasses
  }, /*#__PURE__*/React.createElement(MessageViewContext.Provider, {
    value: {
      selectMessage: setSelectedMessage
    }
  }, /*#__PURE__*/React.createElement("div", null, filledTypes > 1 && /*#__PURE__*/React.createElement(Bar, {
    startContent: /*#__PURE__*/React.createElement(SegmentedButton, {
      onSelectionChange: handleListFilterChange
    }, /*#__PURE__*/React.createElement(SegmentedButtonItem, {
      "data-key": "All",
      pressed: listFilter === 'All'
    }, i18nBundle.getText(ALL)), Object.entries(messageTypes).map(_ref => {
      let [valueState, count] = _ref;
      if (count === 0) {
        return null;
      }
      return /*#__PURE__*/React.createElement(SegmentedButtonItem, {
        key: valueState,
        "data-key": valueState,
        pressed: listFilter === valueState,
        icon: getIconNameForType(valueState),
        className: classes.button
      }, count);
    }))
  }), /*#__PURE__*/React.createElement(List, {
    onItemClick: onItemSelect,
    noDataText: i18nBundle.getText(LIST_NO_DATA)
  }, groupItems ? groupedMessages.map(_ref2 => {
    let [groupName, items] = _ref2;
    return /*#__PURE__*/React.createElement(Fragment, {
      key: groupName
    }, groupName && /*#__PURE__*/React.createElement(GroupHeaderListItem, null, groupName), items);
  }) : filteredChildren)), /*#__PURE__*/React.createElement("div", null, childrenArray.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, showDetailsPageHeader && /*#__PURE__*/React.createElement(Bar, {
    startContent: /*#__PURE__*/React.createElement(Button, {
      design: ButtonDesign.Transparent,
      icon: iconSlimArrowLeft,
      onClick: navigateBack
    })
  }), selectedMessage && /*#__PURE__*/React.createElement(FlexBox, {
    className: classes.detailsContainer
  }, /*#__PURE__*/React.createElement(Icon, {
    "data-type": selectedMessage.type,
    name: getIconNameForType(selectedMessage.type),
    className: classes.detailsIcon
  }), /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column
  }, /*#__PURE__*/React.createElement(Title, {
    level: TitleLevel.H5,
    className: classes.detailsTitle
  }, selectedMessage.titleText), /*#__PURE__*/React.createElement("div", {
    className: classes.detailsText
  }, selectedMessage.children)))) : null)));
});
MessageView.displayName = 'MessageView';
export { MessageView };