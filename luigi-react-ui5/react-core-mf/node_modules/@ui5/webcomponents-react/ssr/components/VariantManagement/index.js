'use client';

import '@ui5/webcomponents-fiori/dist/illustrations/UnableToLoad.js';
import navDownIcon from '@ui5/webcomponents-icons/dist/navigation-down-arrow.js';
import searchIcon from '@ui5/webcomponents-icons/dist/search.js';
import { enrichEventWithDetails, ThemingParameters, useI18nBundle } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { Children, cloneElement, forwardRef, isValidElement, useCallback, useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { BarDesign, ButtonDesign, IllustrationMessageType, ListMode, PopoverPlacementType, TitleLevel } from '../../enums';
import { MANAGE, MY_VIEWS, SAVE, SAVE_AS, SEARCH, SEARCH_VARIANT, SELECT_VIEW } from '../../i18n/i18n-defaults';
import { useCanRenderPortal } from '../../internal/ssr';
import { stopPropagation } from '../../internal/stopPropagation';
import { VariantManagementContext } from '../../internal/VariantManagementContext';
import { Bar, Button, Icon, IllustratedMessage, Input, List, ResponsivePopover, Title } from '../../webComponents';
import { FlexBox } from '../FlexBox';
import { ManageViewsDialog } from './ManageViewsDialog';
import { SaveViewDialog } from './SaveViewDialog';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
const styles = {
  container: {
    display: 'flex',
    alignItems: 'center',
    textAlign: 'center'
  },
  title: {
    cursor: 'pointer',
    color: ThemingParameters.sapLinkColor,
    textShadow: 'none',
    '&:hover': {
      color: ThemingParameters.sapLink_Hover_Color
    },
    '&:active': {
      color: ThemingParameters.sapLink_Active_Color
    }
  },
  disabled: {
    '& $title': {
      color: ThemingParameters.sapGroup_TitleTextColor,
      cursor: 'default',
      '&:hover': {
        color: 'ThemingParameters.sapGroup_TitleTextColor'
      }
    }
  },
  dirtyState: {
    color: ThemingParameters.sapGroup_TitleTextColor,
    paddingInline: '0.125rem',
    fontWeight: 'bold',
    font: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    flexGrow: 1
  },
  dirtyStateText: {
    fontSize: ThemingParameters.sapFontSmallSize,
    fontWeight: 'normal'
  },
  navDownBtn: {
    marginInlineStart: '0.125rem'
  },
  footer: {
    '& > :last-child': {
      marginInlineEnd: 0
    }
  },
  inputIcon: {
    cursor: 'pointer',
    color: ThemingParameters.sapContent_IconColor
  },
  searchInput: {
    padding: '0.25rem 1rem'
  },
  popover: {
    minWidth: '25rem',
    '&::part(content), &::part(footer)': {
      padding: 0
    },
    '&::part(footer)': {
      borderBlockStart: 'none'
    }
  }
};
const useStyles = createUseStyles(styles, {
  name: 'VariantManagement'
});
/**
 * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.
 */
const VariantManagement = /*#__PURE__*/forwardRef((props, ref) => {
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const {
    titleText = i18nBundle.getText(MY_VIEWS),
    className,
    style,
    placement = PopoverPlacementType.Bottom,
    level = TitleLevel.H4,
    onSelect,
    closeOnItemSelect,
    disabled,
    onSaveAs,
    onSaveManageViews,
    showOnlyFavorites,
    inErrorState,
    hideShare,
    children,
    hideManageVariants,
    hideApplyAutomatically,
    hideSetAsDefault,
    hideCreatedBy,
    hideSaveAs,
    dirtyStateText = '*',
    dirtyState,
    onSave,
    portalContainer,
    ...rest
  } = props;
  const classes = useStyles();
  const popoverRef = useRef(null);
  const [safeChildren, setSafeChildren] = useState(Children.toArray(children));
  const [showInput, setShowInput] = useState(safeChildren.length > 9);
  useEffect(() => {
    setSafeChildren(Children.toArray(children));
  }, [children]);
  useEffect(() => {
    if (safeChildren.length > 9) {
      setShowInput(true);
    } else {
      setShowInput(false);
    }
  }, [safeChildren.length]);
  const [manageViewsDialogOpen, setManageViewsDialogOpen] = useState(false);
  const [saveAsDialogOpen, setSaveAsDialogOpen] = useState(false);
  const [selectedVariant, setSelectedVariant] = useState(() => {
    const currentSelectedVariant = safeChildren.find(item => /*#__PURE__*/isValidElement(item) && item.props.selected);
    if (currentSelectedVariant) {
      return {
        ...currentSelectedVariant.props,
        variantItem: currentSelectedVariant.ref
      };
    }
  });
  const [selectedSaveViewInputProps, setSelectedSaveViewInputProps] = useState(selectedVariant?.saveViewInputProps ?? {});
  const handleClose = () => {
    popoverRef.current.close();
  };
  const handleManageClick = () => {
    setManageViewsDialogOpen(true);
  };
  const handleManageClose = () => {
    setManageViewsDialogOpen(false);
  };
  const handleOpenSaveAsDialog = () => {
    setSaveAsDialogOpen(true);
  };
  const handleSaveAsClose = () => {
    setSaveAsDialogOpen(false);
  };
  const handleSave = e => {
    if (typeof onSave === 'function') {
      onSave(enrichEventWithDetails(e, selectedVariant));
    }
  };
  const handleSaveView = (e, selectedVariant) => {
    if (typeof onSaveAs === 'function') {
      onSaveAs(enrichEventWithDetails(e, selectedVariant));
    }
    setSelectedVariant(selectedVariant);
    if (!e.defaultPrevented) {
      handleSaveAsClose();
    }
  };
  const handleSaveManageViews = (e, payload) => {
    const {
      defaultView,
      updatedRows,
      deletedRows
    } = payload;
    const callbackProperties = {
      deletedVariants: [],
      prevVariants: [],
      updatedVariants: [],
      variants: []
    };
    setSafeChildren(prev => Children.toArray(prev.map(child => {
      if (! /*#__PURE__*/isValidElement(child)) {
        return false;
      }
      let updatedProps = {};
      const currentVariant = popoverRef.current.querySelector(`ui5-li[data-children="${child.props.children}"]`);
      callbackProperties.prevVariants.push(child.props);
      if (defaultView) {
        if (defaultView === child.props.children) {
          updatedProps.isDefault = true;
        } else if (child.props.isDefault) {
          updatedProps.isDefault = false;
        }
      }
      if (Object.keys(updatedRows).includes(child.props.children)) {
        const {
          currentVariant: _0,
          ...rest
        } = updatedRows[child.props.children];
        updatedProps = {
          ...updatedProps,
          ...rest
        };
      }
      if (deletedRows.has(child.props.children)) {
        callbackProperties.deletedVariants.push(child.props);
        return false;
      }
      if (Object.keys(updatedProps).length > 0) {
        callbackProperties.updatedVariants.push({
          ...child.props,
          ...updatedProps,
          variantItem: currentVariant,
          prevVariant: {
            ...child.props
          }
        });
      }
      callbackProperties.variants.push({
        ...child.props,
        ...updatedProps,
        variantItem: currentVariant
      });
      return /*#__PURE__*/cloneElement(child, updatedProps);
    })));
    if (typeof onSaveManageViews === 'function') {
      onSaveManageViews(enrichEventWithDetails(e, callbackProperties));
    }
    if (!e.defaultPrevented) {
      handleManageClose();
    }
  };
  const handleOpenVariantManagement = useCallback(e => {
    popoverRef.current.showAt(e.target);
  }, [popoverRef]);
  const searchText = i18nBundle.getText(SEARCH);
  const saveAsText = i18nBundle.getText(SAVE_AS);
  const manageText = i18nBundle.getText(MANAGE);
  const saveText = i18nBundle.getText(SAVE);
  const a11ySearchText = i18nBundle.getText(SEARCH_VARIANT);
  const selectViewText = i18nBundle.getText(SELECT_VIEW);
  const variantManagementClasses = clsx(classes.container, disabled && classes.disabled, className);
  const dirtyStateClasses = clsx(classes.dirtyState, dirtyStateText !== '*' && classes.dirtyStateText);
  const selectVariantEventRef = useRef();
  useEffect(() => {
    if (selectVariantEventRef.current) {
      if (typeof onSelect === 'function') {
        onSelect(enrichEventWithDetails(selectVariantEventRef.current, {
          selectedVariant
        }));
        selectVariantEventRef.current = undefined;
      }
    }
  }, [selectedVariant, onSelect]);
  useEffect(() => {
    const selectedChild = safeChildren.find(item => /*#__PURE__*/isValidElement(item) && item.props.children === selectedVariant?.children);
    setSelectedSaveViewInputProps(selectedChild?.props.saveViewInputProps ?? {});
  }, [selectedVariant, safeChildren]);
  const handleVariantItemSelect = e => {
    setSelectedVariant({
      ...e.detail.selectedItems[0].dataset,
      variantItem: e.detail.selectedItems[0]
    });
    selectVariantEventRef.current = e;
    if (closeOnItemSelect) {
      handleClose();
    }
  };
  const variantNames = safeChildren.map(item => /*#__PURE__*/isValidElement(item) && typeof item.props?.children === 'string' ? item.props.children : '');
  const [favoriteChildren, setFavoriteChildren] = useState(undefined);
  useEffect(() => {
    if (showOnlyFavorites) {
      setFavoriteChildren(safeChildren.filter(child => /*#__PURE__*/isValidElement(child) && (child.props.favorite || child.props.isDefault)));
    }
    if (!showOnlyFavorites && favoriteChildren?.length > 0) {
      setFavoriteChildren(undefined);
    }
  }, [showOnlyFavorites, safeChildren]);
  const safeChildrenWithFavorites = favoriteChildren ?? safeChildren;
  const [filteredChildren, setFilteredChildren] = useState(undefined);
  const [searchValue, setSearchValue] = useState('');
  const handleSearchInput = e => {
    setSearchValue(e.target.value);
    setFilteredChildren(safeChildrenWithFavorites.filter(child => typeof child?.props?.children === 'string' && child.props.children.toLowerCase().includes(e.target.value.toLowerCase())));
  };
  useEffect(() => {
    if (filteredChildren) {
      setFilteredChildren(safeChildrenWithFavorites.filter(child => typeof child?.props?.children === 'string' && child.props.children.toLowerCase().includes(searchValue)));
    }
  }, [safeChildrenWithFavorites]);
  const canRenderPortal = useCanRenderPortal();
  const showSaveBtn = dirtyState && !selectedVariant?.readOnly;
  return /*#__PURE__*/_jsx("div", {
    className: variantManagementClasses,
    style: style,
    ...rest,
    ref: ref,
    children: /*#__PURE__*/_jsxs(VariantManagementContext.Provider, {
      value: {
        selectVariantItem: setSelectedVariant
      },
      children: [/*#__PURE__*/_jsxs(FlexBox, {
        onClick: disabled ? undefined : handleOpenVariantManagement,
        children: [/*#__PURE__*/_jsx(Title, {
          level: level,
          className: classes.title,
          children: selectedVariant?.children
        }), dirtyState && /*#__PURE__*/_jsx("div", {
          className: dirtyStateClasses,
          children: dirtyStateText
        })]
      }), /*#__PURE__*/_jsx(Button, {
        className: clsx(classes.navDownBtn, 'ui5-content-density-compact'),
        tooltip: selectViewText,
        accessibleName: selectViewText,
        onClick: disabled ? undefined : handleOpenVariantManagement,
        design: ButtonDesign.Transparent,
        icon: navDownIcon,
        disabled: disabled
      }), canRenderPortal ? /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(ResponsivePopover, {
        className: classes.popover,
        ref: popoverRef,
        headerText: titleText,
        placementType: placement,
        footer: (showSaveBtn || !hideSaveAs || !hideManageVariants) && /*#__PURE__*/_jsx(Bar, {
          design: BarDesign.Footer,
          className: classes.footer,
          endContent: /*#__PURE__*/_jsxs(_Fragment, {
            children: [!inErrorState && showSaveBtn && /*#__PURE__*/_jsx(Button, {
              onClick: handleSave,
              design: ButtonDesign.Emphasized,
              children: saveText
            }), !inErrorState && !hideSaveAs && /*#__PURE__*/_jsx(Button, {
              onClick: handleOpenSaveAsDialog,
              design: showSaveBtn ? ButtonDesign.Transparent : ButtonDesign.Emphasized,
              disabled: !selectedVariant || Object.keys(selectedVariant).length === 0,
              children: saveAsText
            }), !inErrorState && !hideManageVariants && /*#__PURE__*/_jsx(Button, {
              onClick: handleManageClick,
              design: showSaveBtn || !hideSaveAs ? ButtonDesign.Transparent : ButtonDesign.Emphasized,
              children: manageText
            })]
          })
        }),
        onAfterClose: stopPropagation,
        children: inErrorState ? /*#__PURE__*/_jsx(IllustratedMessage, {
          name: IllustrationMessageType.UnableToLoad
        }) : /*#__PURE__*/_jsx(List, {
          onSelectionChange: handleVariantItemSelect,
          mode: ListMode.SingleSelect,
          header: showInput ? /*#__PURE__*/_jsx("div", {
            className: classes.searchInput,
            tabIndex: -1,
            children: /*#__PURE__*/_jsx(Input, {
              accessibleName: a11ySearchText,
              value: searchValue,
              placeholder: searchText,
              onInput: handleSearchInput,
              showClearIcon: true,
              icon: /*#__PURE__*/_jsx(Icon, {
                name: searchIcon,
                className: classes.inputIcon
              })
            })
          }) : undefined,
          children: filteredChildren ?? safeChildrenWithFavorites
        })
      }), portalContainer ?? document.body) : null, manageViewsDialogOpen && /*#__PURE__*/_jsx(ManageViewsDialog, {
        onAfterClose: handleManageClose,
        handleSaveManageViews: handleSaveManageViews,
        showShare: !hideShare,
        showApplyAutomatically: !hideApplyAutomatically,
        showCreatedBy: !hideCreatedBy,
        showSetAsDefault: !hideSetAsDefault,
        variantNames: variantNames,
        portalContainer: portalContainer,
        showOnlyFavorites: showOnlyFavorites,
        children: safeChildren
      }), saveAsDialogOpen && /*#__PURE__*/_jsx(SaveViewDialog, {
        saveViewInputProps: selectedSaveViewInputProps,
        portalContainer: portalContainer,
        showShare: !hideShare,
        showApplyAutomatically: !hideApplyAutomatically,
        showSetAsDefault: !hideSetAsDefault,
        onAfterClose: handleSaveAsClose,
        handleSave: handleSaveView,
        selectedVariant: selectedVariant,
        variantNames: variantNames
      })]
    })
  });
});
VariantManagement.displayName = 'VariantManagement';
export { VariantManagement };