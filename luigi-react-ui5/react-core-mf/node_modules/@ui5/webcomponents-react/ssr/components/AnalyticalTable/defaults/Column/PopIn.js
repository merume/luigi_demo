import { ThemingParameters } from '@ui5/webcomponents-react-base';
import React from 'react';
import { createUseStyles } from 'react-jss';
import { makeRenderer } from 'react-table';
import { FlexBoxAlignItems } from '../../../../enums/FlexBoxAlignItems';
import { FlexBoxDirection } from '../../../../enums/FlexBoxDirection';
import { FlexBoxWrap } from '../../../../enums/FlexBoxWrap';
import { FlexBox } from '../../../FlexBox';
import { Text } from '../../../Text';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const PopInStyles = {
  container: {
    width: '100%'
  },
  defaultCell: {
    fontFamily: `${ThemingParameters.sapFontBoldFamily}`,
    '& *': {
      fontFamily: `${ThemingParameters.sapFontBoldFamily}`
    }
  },
  header: {
    height: '16px'
  }
};
const useStyles = createUseStyles(PopInStyles, {
  name: 'PopIn'
});
export const PopIn = instance => {
  const {
    state,
    contentToRender,
    cell,
    row,
    internalRowHeight
  } = instance;
  const classes = useStyles();
  return /*#__PURE__*/_jsxs(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classes.container,
    children: [/*#__PURE__*/_jsx(FlexBox, {
      alignItems: contentToRender !== 'Grouped' && contentToRender !== 'Expandable' ? FlexBoxAlignItems.Start : FlexBoxAlignItems.Center,
      wrap: FlexBoxWrap.NoWrap,
      className: classes.defaultCell,
      style: {
        height: internalRowHeight
      },
      children: cell.render(contentToRender)
    }), contentToRender !== 'Grouped' && state.popInColumns?.map(item => {
      const popInInstanceProps = row.allCells.find(cell => cell.column.id === item.id);
      const renderHeader = () => {
        if (item.column.PopInHeader) {
          return typeof item.column.PopInHeader === 'function' ? item.column.PopInHeader({
            ...instance,
            ...popInInstanceProps
          }) : item.column.PopInHeader;
        }
        return typeof item.column.Header === 'function' ? makeRenderer({
          ...instance,
          ...popInInstanceProps
        }, item.column)(item.column.Header) : item.column.Header;
      };
      const renderCell = () => {
        if (item.column?.Cell) {
          const cell = item.column.Cell;
          if (typeof cell === 'string') {
            return /*#__PURE__*/_jsx(Text, {
              wrapping: false,
              title: cell,
              children: cell
            });
          }
          return makeRenderer({
            ...instance,
            ...popInInstanceProps,
            isPopIn: true
          }, item.column)(item.column.Cell);
        }
        return popInInstanceProps?.value ? /*#__PURE__*/_jsx(Text, {
          wrapping: false,
          title: popInInstanceProps.value,
          children: popInInstanceProps.value
        }) : null;
      };
      return /*#__PURE__*/_jsxs(FlexBox, {
        direction: FlexBoxDirection.Column,
        children: [item.column?.Header && /*#__PURE__*/_jsxs("div", {
          className: classes.header,
          children: [renderHeader(), ":"]
        }), /*#__PURE__*/_jsx("div", {
          style: {
            height: internalRowHeight
          },
          children: popInInstanceProps && renderCell()
        })]
      }, item.id);
    })]
  });
};