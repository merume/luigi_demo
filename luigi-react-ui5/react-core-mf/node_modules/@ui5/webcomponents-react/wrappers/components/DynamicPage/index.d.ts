import React, { ReactElement, ReactNode } from 'react';
import { PageBackgroundDesign } from '../../enums';
import { CommonProps } from '../../interfaces';
export interface DynamicPagePropTypes extends Omit<CommonProps, 'title' | 'children'> {
    /**
     * Determines the background color of DynamicPage.
     */
    backgroundDesign?: PageBackgroundDesign | keyof typeof PageBackgroundDesign;
    /**
     * Defines whether the `headerContent` can be hidden by scrolling down.
     */
    alwaysShowContentHeader?: boolean;
    /**
     * Determines whether the expand/collapse `headerContent` button is shown.
     */
    showHideHeaderButton?: boolean;
    /**
     * Determines whether the pin button is shown.
     */
    headerContentPinnable?: boolean;
    /**
     * Defines the upper, always static, title section of the `DynamicPage`.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `DynamicPageTitle` in order to preserve the intended design.
     */
    headerTitle?: ReactElement;
    /**
     * Defines the dynamic header section of the `DynamicPage`.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `DynamicPageHeader` in order to preserve the intended design.
     */
    headerContent?: ReactElement;
    /**
     * React element which defines the footer content.
     *
     * __Note:__ To preserve the intended design, please use only non-content based `height` values (`px`, `rem`, `vh`, etc.) as height of the `DynamicPage`.
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `Bar` with `design={BarDesign.FloatingFooter}` in order to preserve the intended design.
     */
    footer?: ReactElement;
    /**
     * React element or node array which defines the content.
     *
     * __Note:__ Assigning `children` as function is recommended when implementing sticky sub-headers. You can find out more about this [here](https://sap.github.io/ui5-webcomponents-react/?path=/story/layouts-floorplans-dynamicpage--sticky-sub-headers).
     */
    children?: ReactNode | ReactNode[] | ((payload: {
        stickyHeaderHeight: number;
    }) => ReactElement);
    /**
     * Defines internally used a11y properties.
     */
    a11yConfig?: {
        dynamicPageAnchorBar?: {
            role?: string;
        };
        dynamicPageFooter?: {
            role?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
        };
    };
    /**
     * Fired when the `headerContent` is expanded or collapsed.
     */
    onToggleHeaderContent?: (visible: boolean) => void;
    /**
     * Fired when the `headerContent` changes its `pinned` state.
     */
    onPinnedStateChange?: (pinned: boolean) => void;
}
/**
 * The dynamic page is a generic layout control designed to support various floorplans and use cases.
 * The content of both the header and the page can differ from floorplan to floorplan.
 *
 * The header of the dynamic page is collapsible, which helps users to focus on the actual page content, but still ensures that important header information
 * and actions are readily available.
 */
declare const DynamicPage: React.ForwardRefExoticComponent<DynamicPagePropTypes & React.RefAttributes<HTMLDivElement>>;
export { DynamicPage };
