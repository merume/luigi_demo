'use client';

import iconDown from '@ui5/webcomponents-icons/dist/down.js';
import iconUp from '@ui5/webcomponents-icons/dist/up.js';
import { useI18nBundle, useIsomorphicId } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { cloneElement, forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { DeviationIndicator, ValueColor } from '../../enums';
import { ARIA_DESC_CARD_HEADER, NUMERICCONTENT_DEVIATION_DOWN, NUMERICCONTENT_DEVIATION_UP, SEMANTIC_COLOR_CRITICAL, SEMANTIC_COLOR_ERROR, SEMANTIC_COLOR_GOOD, SEMANTIC_COLOR_NEUTRAL } from '../../i18n/i18n-defaults';
import { flattenFragments } from '../../internal/utils';
import { Icon } from '../../webComponents';
import styles from './AnalyticalCardHeader.jss';
const useStyles = createUseStyles(styles, {
  name: 'AnalyticalCardHeader'
});
const semanticColorMap = new Map([[ValueColor.Neutral, SEMANTIC_COLOR_NEUTRAL], [ValueColor.Good, SEMANTIC_COLOR_GOOD], [ValueColor.Critical, SEMANTIC_COLOR_CRITICAL], [ValueColor.Error, SEMANTIC_COLOR_ERROR]]);
const deviationMap = new Map([[DeviationIndicator.Up, NUMERICCONTENT_DEVIATION_UP], [DeviationIndicator.Down, NUMERICCONTENT_DEVIATION_DOWN]]);

/**
 * The `AnalyticalCardHeader` component serves as layout for the header prop of the `AnalyticalCard`.
 *
 * It should only be used as header for the `AnalyticalCard` component.
 */
export const AnalyticalCardHeader = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    titleText,
    subtitleText,
    value,
    scale,
    state,
    onClick,
    className,
    description,
    status,
    unitOfMeasurement,
    trend,
    style,
    children,
    id,
    ...rest
  } = props;
  const classes = useStyles();
  const headerClasses = clsx(classes.cardHeader, onClick && classes.cardHeaderClickable, className);
  const valueAndUnitClasses = clsx(classes.mainIndicator, state === ValueColor.Good && classes.good, state === ValueColor.Error && classes.error, state === ValueColor.Critical && classes.critical, state === ValueColor.Neutral && classes.neutral);
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const uniqueHeaderId = useIsomorphicId();
  const headerId = id ?? uniqueHeaderId;
  const sideIndicators = flattenFragments(children);
  const sideIndicatorIds = sideIndicators.map((child, idx) => {
    return child.props?.id ?? `${headerId}-indicator${idx}`;
  });
  let kpiAriaLabel = `${value ?? ''}${scale ?? ''}\n`;
  if (trend && trend !== DeviationIndicator.None) {
    kpiAriaLabel += i18nBundle.getText(deviationMap.get(trend) ?? '');
    kpiAriaLabel += '\n';
  }
  if (state && state !== ValueColor.None) {
    kpiAriaLabel += i18nBundle.getText(semanticColorMap.get(state) ?? '');
  }
  let cardLabelledBy = `${headerId}-title`;
  if (subtitleText) {
    cardLabelledBy += ` ${headerId}-subtitle`;
  }
  if (unitOfMeasurement) {
    cardLabelledBy += ` ${headerId}-unitOfMeasurement`;
  }
  cardLabelledBy += ` ${headerId}-mainIndicator`;
  for (const sideIndicatorId of sideIndicatorIds) {
    cardLabelledBy += ` ${sideIndicatorId}`;
  }
  if (description) {
    cardLabelledBy += ` ${headerId}-description`;
  }
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: headerClasses,
    style: style,
    id: headerId,
    "data-sap-ui-fastnavgroup": "true",
    tabIndex: 0,
    role: "heading",
    "aria-roledescription": i18nBundle.getText(ARIA_DESC_CARD_HEADER),
    "aria-labelledby": cardLabelledBy,
    ...rest,
    onClick: onClick,
    slot: 'header'
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: classes.headerTitles
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.headerFirstLine
  }, /*#__PURE__*/React.createElement("span", {
    role: "heading",
    "aria-level": 3,
    className: classes.headerText,
    id: `${headerId}-title`
  }, titleText), status && /*#__PURE__*/React.createElement("span", {
    className: classes.status
  }, status)), (subtitleText || unitOfMeasurement) && /*#__PURE__*/React.createElement("div", {
    className: classes.headerSecondLine
  }, /*#__PURE__*/React.createElement("span", {
    id: `${headerId}-subtitle`
  }, subtitleText), unitOfMeasurement && /*#__PURE__*/React.createElement("span", {
    id: `${headerId}-unitOfMeasurement`,
    className: classes.unitOfMeasurement
  }, unitOfMeasurement))), /*#__PURE__*/React.createElement("div", {
    className: classes.kpiContent
  }, /*#__PURE__*/React.createElement("div", {
    className: valueAndUnitClasses,
    id: `${headerId}-mainIndicator`,
    "aria-label": kpiAriaLabel,
    role: "img"
  }, /*#__PURE__*/React.createElement("span", {
    className: classes.value
  }, value), /*#__PURE__*/React.createElement("div", {
    className: classes.indicatorAndUnit
  }, trend !== DeviationIndicator.None && /*#__PURE__*/React.createElement(Icon, {
    className: clsx(classes.indicator),
    name: trend === DeviationIndicator.Up ? iconUp : iconDown
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.unit
  }, scale))), /*#__PURE__*/React.createElement("div", {
    className: classes.indicatorGap
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.sideIndicators
  }, sideIndicators.map((sideIndicator, index) => {
    return /*#__PURE__*/cloneElement(sideIndicator, {
      id: sideIndicator.props.id ?? `${headerId}-indicator${index}`
    });
  }))), description && /*#__PURE__*/React.createElement("span", {
    id: `${headerId}-description`,
    className: classes.description
  }, description)));
});
AnalyticalCardHeader.displayName = 'AnalyticalCardHeader';
AnalyticalCardHeader.defaultProps = {
  trend: DeviationIndicator.None,
  state: ValueColor.None
};