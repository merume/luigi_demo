import { AnalyticalTableSelectionBehavior } from '../../../enums/AnalyticalTableSelectionBehavior';
import { AnalyticalTableSelectionMode } from '../../../enums/AnalyticalTableSelectionMode';
import { resolveCellAlignment } from '../util';
const getHeaderGroupProps = (headerGroupProps, _ref) => {
  let {
    instance
  } = _ref;
  const {
    classes
  } = instance.webComponentsReactProperties;
  return [headerGroupProps, {
    className: classes.tableHeaderRow
  }];
};
const getHeaderProps = (columnProps, _ref2) => {
  let {
    instance,
    column
  } = _ref2;
  const hasPopover = column.canGroupBy || column.canSort || column.canFilter;
  const {
    classes
  } = instance.webComponentsReactProperties;
  const style = {
    width: column.totalWidth
  };
  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_navigation_column') {
    style.padding = 0;
  }
  if (hasPopover) {
    style.cursor = 'pointer';
  }
  return [columnProps, {
    className: classes.th,
    column,
    style: style,
    id: column.id
  }];
};
const ROW_SELECTION_ATTRIBUTE = 'data-is-selected';
const getRowProps = (rowProps, _ref3) => {
  let {
    instance,
    row
  } = _ref3;
  const {
    webComponentsReactProperties
  } = instance;
  const {
    classes,
    selectionBehavior,
    selectionMode,
    alternateRowColor
  } = webComponentsReactProperties;
  let className = classes.tr;
  const rowCanBeSelected = [AnalyticalTableSelectionMode.SingleSelect, AnalyticalTableSelectionMode.MultiSelect].includes(selectionMode);
  if (row.isGrouped) {
    className += ` ${classes.tableGroupHeader}`;
  }
  if (alternateRowColor && row.index % 2 !== 0) {
    className += ` ${classes.alternateRowColor}`;
  }
  const newRowProps = {
    className,
    role: 'row'
  };
  if (rowCanBeSelected) {
    if (AnalyticalTableSelectionBehavior.RowSelector !== selectionBehavior) {
      newRowProps.className += ` ${classes.trActive}`;
    }
    if (row.isSelected) {
      newRowProps[ROW_SELECTION_ATTRIBUTE] = '';
    }
  }
  return [rowProps, newRowProps];
};
const getCellProps = (cellProps, _ref4) => {
  let {
    cell: {
      column
    },
    instance
  } = _ref4;
  const {
    classes
  } = instance.webComponentsReactProperties;
  const style = {
    width: `${column.totalWidth}px`,
    ...resolveCellAlignment(column)
  };
  let className = classes.tableCell;
  if (column.className) {
    className += ` ${column.className}`;
  }
  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_navigation_column') {
    style.padding = 0;
  }
  return [cellProps, {
    className,
    style,
    tabIndex: -1
  }];
};
export const useStyling = hooks => {
  hooks.getHeaderGroupProps.push(getHeaderGroupProps);
  hooks.getHeaderProps.push(getHeaderProps);
  hooks.getRowProps.push(getRowProps);
  hooks.getCellProps.push(getCellProps);
};
useStyling.pluginName = 'useStyling';