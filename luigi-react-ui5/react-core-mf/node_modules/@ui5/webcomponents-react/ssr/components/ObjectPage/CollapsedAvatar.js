import { clsx } from 'clsx';
import React, { cloneElement, useEffect, useMemo, useRef, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { AvatarSize } from '../../enums/AvatarSize';
import { jsx as _jsx } from "react/jsx-runtime";
const styles = {
  base: {
    alignSelf: 'center',
    opacity: 0,
    paddingInlineEnd: '1rem'
  },
  hidden: {
    opacity: 0
  },
  visible: {
    transition: 'opacity 0.5s',
    opacity: 1
  },
  imageContainer: {
    display: 'inline-block',
    verticalAlign: 'middle',
    maxHeight: '3rem',
    width: '3rem',
    maxWidth: '3rem'
  },
  image: {
    width: '100%',
    height: '100%'
  }
};
const useStyles = createUseStyles(styles, {
  name: 'CollapsedAvatar'
});
export const CollapsedAvatar = props => {
  const {
    image,
    imageShapeCircle,
    style
  } = props;
  const classes = useStyles();
  const [isMounted, setIsMounted] = useState(false);
  const domRef = useRef(null);
  const avatarContent = useMemo(() => {
    if (!image) return null;
    if (typeof image === 'string') {
      return /*#__PURE__*/_jsx("span", {
        className: classes.imageContainer,
        style: {
          borderRadius: imageShapeCircle ? '50%' : 0,
          overflow: 'hidden'
        },
        children: /*#__PURE__*/_jsx("img", {
          className: classes.image,
          src: image,
          alt: "Object Page Image"
        })
      });
    } else {
      return /*#__PURE__*/cloneElement(image, {
        size: AvatarSize.S,
        className: image.props?.className ? `${classes.imageContainer} ${image.props?.className}` : classes.imageContainer
      });
    }
  }, [image, imageShapeCircle]);
  useEffect(() => {
    setIsMounted(true);
  }, []);
  const containerClasses = clsx(classes.base, isMounted ? classes.visible : classes.hidden);
  return /*#__PURE__*/_jsx("div", {
    ref: domRef,
    className: containerClasses,
    style: style,
    "data-component-name": "ObjectPageCollapsedAvatar",
    children: avatarContent
  });
};