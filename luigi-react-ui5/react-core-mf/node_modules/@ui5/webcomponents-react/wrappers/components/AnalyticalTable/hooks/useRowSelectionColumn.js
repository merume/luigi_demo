import { CssSizeVariablesNames, enrichEventWithDetails } from '@ui5/webcomponents-react-base';
import React from 'react';
import { AnalyticalTableSelectionBehavior } from '../../../enums/AnalyticalTableSelectionBehavior';
import { AnalyticalTableSelectionMode } from '../../../enums/AnalyticalTableSelectionMode';
import { addCustomCSSWithScoping } from '../../../internal/addCustomCSSWithScoping';
import { CheckBox } from '../../../webComponents/CheckBox';

// todo use ::part instead, when available (https://github.com/SAP/ui5-webcomponents/issues/6461)
addCustomCSSWithScoping('ui5-checkbox', `
    :host([data-at-checkbox]) .ui5-checkbox-root {
      display: flex;
      width: unset;
      height: unset;
      justify-content: center;
      min-height: unset;
      min-width: unset;
      padding: 0;
    }
  `);
const customCheckBoxStyling = {
  verticalAlign: 'middle',
  pointerEvents: 'none'
};

/*
 * COMPONENTS
 */

const Header = instance => {
  const {
    getToggleAllRowsSelectedProps,
    webComponentsReactProperties: {
      selectionMode
    }
  } = instance;
  if (selectionMode === AnalyticalTableSelectionMode.SingleSelect) {
    return null;
  }
  const checkBoxProps = getToggleAllRowsSelectedProps();
  return /*#__PURE__*/React.createElement(CheckBox, {
    ...checkBoxProps,
    style: customCheckBoxStyling,
    tabIndex: -1,
    onChange: undefined,
    checked: checkBoxProps.indeterminate ? true : checkBoxProps.checked
  });
};
const Cell = _ref => {
  let {
    row,
    webComponentsReactProperties: {
      selectionMode
    }
  } = _ref;
  if (selectionMode === AnalyticalTableSelectionMode.SingleSelect || row.isGrouped) {
    return null;
  }
  return /*#__PURE__*/React.createElement(CheckBox, {
    ...row.getToggleRowSelectedProps(),
    tabIndex: -1,
    style: customCheckBoxStyling,
    "data-name": "internal_selection_column"
  });
};

/*
 * TABLE HOOKS
 */

const headerProps = (props, _ref2) => {
  let {
    instance: {
      flatRows,
      webComponentsReactProperties: {
        onRowSelect,
        selectionMode
      },
      toggleAllRowsSelected,
      isAllRowsSelected
    }
  } = _ref2;
  const style = {
    ...props.style,
    cursor: 'pointer',
    display: 'flex',
    justifyContent: 'center'
  };
  if (props.key === 'header___ui5wcr__internal_selection_column' && selectionMode === AnalyticalTableSelectionMode.MultiSelect) {
    const onClick = e => {
      toggleAllRowsSelected(!isAllRowsSelected);
      if (typeof onRowSelect === 'function') {
        onRowSelect(
        // cannot use instance.selectedFlatRows here as it only returns all rows on the first level
        enrichEventWithDetails(e, {
          allRowsSelected: !isAllRowsSelected,
          selectedFlatRows: !isAllRowsSelected ? flatRows : []
        }));
      }
    };
    const onKeyDown = e => {
      if (e.code === 'Space' || e.code === 'Enter') {
        e.preventDefault();
        onClick(e);
      }
    };
    return [props, {
      onClick,
      onKeyDown,
      style
    }];
  }
  return props;
};
const columnDeps = (deps, _ref3) => {
  let {
    instance: {
      webComponentsReactProperties
    }
  } = _ref3;
  return [...deps, webComponentsReactProperties.selectionMode, webComponentsReactProperties.selectionBehavior];
};
const visibleColumnsDeps = (deps, _ref4) => {
  let {
    instance
  } = _ref4;
  return [...deps, instance.webComponentsReactProperties.selectionMode, instance.webComponentsReactProperties.selectionBehavior];
};
const visibleColumns = (currentVisibleColumns, _ref5) => {
  let {
    instance: {
      webComponentsReactProperties
    }
  } = _ref5;
  if (webComponentsReactProperties.selectionMode === AnalyticalTableSelectionMode.None || webComponentsReactProperties.selectionBehavior === AnalyticalTableSelectionBehavior.RowOnly) {
    return currentVisibleColumns;
  }
  const selectionColumn = currentVisibleColumns.find(_ref6 => {
    let {
      id
    } = _ref6;
    return id === '__ui5wcr__internal_selection_column';
  });
  return [selectionColumn, ...currentVisibleColumns.filter(_ref7 => {
    let {
      id
    } = _ref7;
    return id !== '__ui5wcr__internal_selection_column';
  })];
};
const columns = (currentColumns, _ref8) => {
  let {
    instance
  } = _ref8;
  const {
    webComponentsReactProperties
  } = instance;
  const {
    selectionMode,
    selectionBehavior,
    tableRef
  } = webComponentsReactProperties;
  if (selectionMode === AnalyticalTableSelectionMode.None || selectionBehavior === AnalyticalTableSelectionBehavior.RowOnly) {
    return currentColumns;
  }
  const tableSelectionColumnWidth = tableRef.current && parseInt(getComputedStyle(tableRef.current).getPropertyValue(CssSizeVariablesNames.sapWcrAnalyticalTableSelectionColumnWidth), 10);
  const selectionColumnWidth = !isNaN(tableSelectionColumnWidth) ? tableSelectionColumnWidth : 47;
  return [{
    id: '__ui5wcr__internal_selection_column',
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    disableDragAndDrop: true,
    width: selectionColumnWidth,
    minWidth: selectionColumnWidth,
    maxWidth: selectionColumnWidth,
    Header,
    Cell
  }, ...currentColumns];
};
const getCellProps = (props, _ref9) => {
  let {
    cell
  } = _ref9;
  if (cell.column.id === '__ui5wcr__internal_selection_column') {
    const style = {
      ...props.style,
      cursor: 'pointer',
      justifyContent: 'center'
    };
    return [props, {
      style
    }];
  }
  return props;
};

// remove padding, width, etc. with addCustomCSS from checkboxes by leveraging the data attribute
const setToggleAllRowsSelectedProps = props => {
  return [props, {
    'data-at-checkbox': true
  }];
};
const setToggleRowSelectedProps = props => {
  return [props, {
    'data-at-checkbox': true
  }];
};
export const useRowSelectionColumn = hooks => {
  hooks.getCellProps.push(getCellProps);
  hooks.getHeaderProps.push(headerProps);
  hooks.getToggleRowSelectedProps.push(setToggleRowSelectedProps);
  hooks.getToggleAllRowsSelectedProps.push(setToggleAllRowsSelectedProps);
  hooks.columns.push(columns);
  hooks.columnsDeps.push(columnDeps);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps);
  hooks.visibleColumns.push(visibleColumns);
};
useRowSelectionColumn.pluginName = 'useRowSelectionColumn';