'use client';

import iconDecline from '@ui5/webcomponents-icons/dist/decline.js';
import iconSearch from '@ui5/webcomponents-icons/dist/search.js';
import { CssSizeVariables, enrichEventWithDetails, ThemingParameters, useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base';
import { clsx } from 'clsx';
import React, { forwardRef, useState } from 'react';
import { createUseStyles } from 'react-jss';
import { ButtonDesign, ListMode, ToolbarDesign } from '../../enums';
import { CANCEL, CLEAR, RESET, SEARCH, SELECT, SELECTED } from '../../i18n/i18n-defaults';
import { Button, Dialog, Icon, Input, List, Title } from '../../webComponents';
import { Text } from '../Text';
import { Toolbar } from '../Toolbar';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const useStyles = createUseStyles({
  dialog: {
    '&::part(header)': {
      paddingBottom: '0.25rem',
      flexDirection: 'column',
      marginBottom: 0
    },
    '&::part(content)': {
      padding: 0
    }
  },
  headerContent: {
    display: 'grid',
    gridTemplateColumns: 'fit-content(100px) minmax(0, 1fr) fit-content(100px)',
    gridTemplateAreas: `
      "titleStart titleCenter cancel"
      "input input input"
      `,
    gridTemplateRows: `${CssSizeVariables.sapWcrDialogHeaderHeight} ${CssSizeVariables.sapWcrDialogSubHeaderHeight}`,
    width: '100%',
    alignItems: 'center'
  },
  title: {
    fontSize: ThemingParameters.sapFontLargeSize,
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    gridColumnStart: 'titleStart',
    gridColumnEnd: 'titleCenter',
    maxWidth: '100%',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  titleCenterAlign: {
    gridArea: 'titleCenter',
    justifySelf: 'center'
  },
  hiddenClearBtn: {
    gridArea: 'titleStart',
    visibility: 'hidden'
  },
  clearBtn: {
    gridArea: 'cancel',
    justifySelf: 'end'
  },
  input: {
    gridArea: 'input',
    width: '100%'
  },
  footer: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'end',
    width: '100%',
    boxSizing: 'border-box',
    '& > *': {
      marginInlineStart: '0.5rem'
    }
  },
  inputIcon: {
    cursor: 'pointer',
    color: ThemingParameters.sapContent_IconColor
  },
  infoBar: {
    padding: '0 0.5rem',
    position: 'sticky',
    top: 0,
    zIndex: 1
  }
}, {
  name: 'SelectDialog'
});
/**
 * The SelectDialog enables users to filter a comprehensive list via a search field and to select one or more items.
 */
const SelectDialog = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    className,
    confirmButtonText,
    growing,
    headerText,
    headerTextAlignCenter,
    listProps,
    mode,
    numberOfSelectedItems,
    rememberSelections,
    showClearButton,
    onAfterClose,
    onClear,
    onConfirm,
    onLoadMore,
    onSearch,
    onSearchInput,
    onSearchReset,
    onBeforeOpen,
    onAfterOpen,
    ...rest
  } = props;
  const classes = useStyles();
  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  const [searchValue, setSearchValue] = useState('');
  const [selectedItems, setSelectedItems] = useState([]);
  const [componentRef, selectDialogRef] = useSyncRef(ref);
  const [listComponentRef, listRef] = useSyncRef(listProps.ref);
  const handleBeforeOpen = e => {
    if (typeof onBeforeOpen === 'function') {
      onBeforeOpen(e);
    }
    if (mode === ListMode.MultiSelect && listRef.current?.hasData) {
      setSelectedItems(listRef.current?.getSelectedItems() ?? []);
    }
  };
  const handleAfterOpen = e => {
    if (typeof onAfterOpen === 'function') {
      onAfterOpen(e);
    }
    listRef.current?.focusFirstItem();
  };
  const handleSearchInput = e => {
    if (typeof onSearchInput === 'function') {
      onSearchInput(enrichEventWithDetails(e, {
        value: e.target.value
      }));
    }
    setSearchValue(e.target.value);
  };
  const handleSearchSubmit = e => {
    if (typeof onSearch === 'function') {
      if (e.type === 'keyup' && e.code === 'Enter') {
        onSearch(enrichEventWithDetails(e, {
          value: e.target.value
        }));
      }
      if (e.type === 'click') {
        onSearch(enrichEventWithDetails(e, {
          value: searchValue
        }));
      }
    }
  };
  const handleResetSearch = e => {
    if (typeof onSearchReset === 'function') {
      onSearchReset(enrichEventWithDetails(e, {
        prevValue: searchValue
      }));
    }
    setSearchValue('');
  };
  const handleSelectionChange = e => {
    if (typeof listProps?.onSelectionChange === 'function') {
      listProps.onSelectionChange(e);
    }
    if (mode === ListMode.MultiSelect) {
      setSelectedItems(e.detail.selectedItems);
    } else {
      if (typeof onConfirm === 'function') {
        onConfirm(e);
      }
      selectDialogRef.current.close();
    }
  };
  const handleClose = () => {
    selectDialogRef.current.close();
  };
  const handleClear = e => {
    if (typeof onClear === 'function') {
      onClear(enrichEventWithDetails(e, {
        prevSelectedItems: selectedItems
      }));
    }
    setSelectedItems([]);
    listRef.current?.deselectSelectedItems();
  };
  const handleConfirm = e => {
    if (typeof onConfirm === 'function') {
      onConfirm(enrichEventWithDetails(e, {
        selectedItems
      }));
    }
    selectDialogRef.current.close();
  };
  const handleAfterClose = e => {
    if (typeof onAfterClose === 'function') {
      onAfterClose(e);
    }
    if (typeof onSearchReset === 'function') {
      onSearchReset(enrichEventWithDetails(e, {
        prevValue: searchValue
      }));
    }
    setSearchValue('');
    if (!rememberSelections) {
      listRef.current?.deselectSelectedItems();
    }
  };
  return /*#__PURE__*/_jsxs(Dialog, {
    ...rest,
    "data-component-name": "SelectDialog",
    ref: componentRef,
    className: clsx(classes.dialog, className),
    onAfterClose: handleAfterClose,
    onBeforeOpen: handleBeforeOpen,
    onAfterOpen: handleAfterOpen,
    children: [/*#__PURE__*/_jsxs("div", {
      className: classes.headerContent,
      slot: "header",
      children: [showClearButton && headerTextAlignCenter && /*#__PURE__*/_jsx(Button, {
        onClick: handleClear,
        design: ButtonDesign.Transparent,
        className: classes.hiddenClearBtn,
        tabIndex: -1,
        "aria-hidden": "true",
        children: i18nBundle.getText(CLEAR)
      }), /*#__PURE__*/_jsx(Title, {
        className: clsx(classes.title, headerTextAlignCenter && classes.titleCenterAlign),
        children: headerText
      }), showClearButton && /*#__PURE__*/_jsx(Button, {
        onClick: handleClear,
        design: ButtonDesign.Transparent,
        className: classes.clearBtn,
        children: i18nBundle.getText(CLEAR)
      }), /*#__PURE__*/_jsx(Input, {
        className: classes.input,
        accessibleName: i18nBundle.getText(SEARCH),
        value: searchValue,
        placeholder: i18nBundle.getText(SEARCH),
        onInput: handleSearchInput,
        onKeyUp: handleSearchSubmit,
        icon: /*#__PURE__*/_jsxs(_Fragment, {
          children: [searchValue && /*#__PURE__*/_jsx(Icon, {
            accessibleName: i18nBundle.getText(RESET),
            title: i18nBundle.getText(RESET),
            name: iconDecline,
            interactive: true,
            onClick: handleResetSearch,
            className: classes.inputIcon
          }), /*#__PURE__*/_jsx(Icon, {
            interactive: true,
            name: iconSearch,
            className: classes.inputIcon,
            onClick: handleSearchSubmit,
            accessibleName: i18nBundle.getText(SEARCH),
            title: i18nBundle.getText(SEARCH)
          })]
        })
      })]
    }), mode === ListMode.MultiSelect && (!!selectedItems.length || numberOfSelectedItems > 0) && /*#__PURE__*/_jsx(Toolbar, {
      design: ToolbarDesign.Info,
      className: classes.infoBar,
      children: /*#__PURE__*/_jsx(Text, {
        children: `${i18nBundle.getText(SELECTED)}: ${numberOfSelectedItems ?? selectedItems.length}`
      })
    }), /*#__PURE__*/_jsx(List, {
      ...listProps,
      ref: listComponentRef,
      growing: growing,
      onLoadMore: onLoadMore,
      mode: mode,
      onSelectionChange: handleSelectionChange,
      children: children
    }), /*#__PURE__*/_jsxs("div", {
      slot: "footer",
      className: classes.footer,
      children: [mode === ListMode.MultiSelect && /*#__PURE__*/_jsx(Button, {
        onClick: handleConfirm,
        design: ButtonDesign.Emphasized,
        children: confirmButtonText ?? i18nBundle.getText(SELECT)
      }), /*#__PURE__*/_jsx(Button, {
        onClick: handleClose,
        design: ButtonDesign.Transparent,
        children: i18nBundle.getText(CANCEL)
      })]
    })]
  });
});
SelectDialog.defaultProps = {
  mode: ListMode.SingleSelect,
  listProps: {}
};
SelectDialog.displayName = 'SelectDialog';
export { SelectDialog };